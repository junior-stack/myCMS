{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home-page","title":"Home Page","text":""},{"location":"Algorithm/","title":"Algorithm","text":""},{"location":"Algorithm/#0-basis","title":"0. Basis","text":""},{"location":"Algorithm/#01-built-in-module","title":"0.1 Built-in module","text":"<p>Python:</p> <ul> <li>Bisect<ul> <li><code>bisect_left(a, x, lo=0, hi=len(a)):</code>This function returns an insertion point in <code>a</code>that all elements to its left are less than\u00a0<code>x</code>, and all elements to its right are greater than or equal to\u00a0<code>x</code></li> <li>bisect_right(a, x, lo=0, hi=len(a)):<code>This function returns an insertion point in</code>a` that all elements to the left are less than or equal to x, all elements to right are greater than x</li> </ul> </li> <li>collections<ul> <li>deque</li> <li>defaultdict</li> </ul> </li> <li>heapq</li> <li>copy:<ul> <li>deepcopy: create deepcopy for objects, including nested list, set and so on</li> </ul> </li> </ul>"},{"location":"Algorithm/#02-runtime-analysis","title":"0.2 Runtime Analysis","text":"<p>Typical leetcode testcase compute machine can execute operations per second. Normally an optimal solution, with the largest input possible, would take less than seconds to terminate execution. Thus implies the following:</p> <ul> <li>n = \\(10^9\\)<ul> <li>O(log n)\uff08Don't think of O(n)) \\(\\Rightarrow\\) binary search(if input is sorted), disjointSet, segment tree, heap, AVL tree</li> </ul> </li> <li>n = \\(10^4\\)<ul> <li>O(n) \\(\\Rightarrow\\) Double pointers, prefix sum, greedy choice, DP with O(n)</li> <li>O(n * logn) \\(\\Rightarrow\\) sort then binary search</li> </ul> </li> <li>n = \\(10^3\\)<ul> <li>O(\\(n^2\\)) \\(\\Rightarrow\\) 2D array, 2D-DP</li> </ul> </li> <li>n = \\(10^2\\)<ul> <li>O(\\(n^3\\)) \\(\\Rightarrow\\) nested tripple loop</li> </ul> </li> <li>n = 10<ul> <li>O(\\(2^n\\)), O(n!) \\(\\Rightarrow\\) DFS, brute force, permutation, backtracing(recursion)</li> </ul> </li> </ul>"},{"location":"Algorithm/#1","title":"1. \u4e8c\u5206\u67e5\u627e","text":"<p>Note:</p> <ul> <li>\u53d6<code>arr[i..j]</code>\u5de6\u4e2d\u70b9: <code>(i + j) // 2</code></li> <li>\u53d6<code>arr[i..j]</code>\u53f3\u4e2d\u70b9: <code>(i + j + 1) // 2</code> Template(General template for finding element in sorted array):</li> </ul> <pre><code>def binary_search(lst, target):\n    left = 0\n    right = len(lst) - 1\n\n    while left &lt;= right:\n        mid = (left + right) // 2\n\n        if lst[mid] == target:\n            return mid\n        elif lst[mid] &lt; target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1      \n</code></pre> <p>Variant template:</p> <ul> <li>Find the first or last target in a sorted array that contains duplicate elements</li> <li>Find the insert position of target (Note: insert_position may &gt; len(nums - 1)) </li> <li>Find the position of the element in nums that is larger than or equal to target</li> </ul> pythonJava <pre><code># lower is true, then find the first target index\n# lower is false, then find the last target index\ndef binarySearch(nums, target, lower):\n    left = 0\n    right = len(nums) - 1\n    ans = len(nums)\n    # 5, 5, 6; target = 5\n    while left &lt;= right:\n        mid = (left + right) // 2\n\n        if nums[mid] &gt; target or (lower and nums[mid] &gt;= target):\n            right = mid - 1\n            # if below line is moved to else block,\n            # ans should be initialized to -1\n            # return line should be return ans + 1 if lower else ans\n            ans = mid \n        else:\n            left = mid + 1\n    return ans if lower else ans - 1\n</code></pre> <pre><code>class Solution {\n    //  find first\n    // find last lst[mid] &lt;= target\n    public int binarySearch(lst: int[], int target, boolean findFirst){\n        int left = 0;\n        int right = lst.length - 1;\n        int ans = lst.length;\n        while(left &lt;= right){\n            int mid = (left + right) &gt;&gt;&gt; 1\uff1b\n\n            if(lst[mid] &gt; target || findFirst &amp;&amp; lst[mid] &gt;= target){\n                right = mid - 1;\n                ans = mid;\n            }\n            else{\n                left = mid + 1;\n            }\n        }\n        return ans if findFirst else ans - 1;\n    }\n\n\n}\n</code></pre> <ul> <li>\u4e8c\u5206\u6bd4\u8f83\u6761\u4ef6(\u601d\u8def\u6765\u6e90\u4e8eSearch in Rotated Sorted Array\uff0c leetcode: #33) <pre><code>def binaryCompare(nums):\n    l = 0\n    r = len(nums) - 1\n    mid = (l + r) // 2\n    ans = mid\n    while l &lt;= r:\n        if ...:  # \u5173\u4e8enums[mid]\u7684\u6761\u4ef6\n            l = mid + 1\n        elif ...: # \u5173\u4e8enums[mid]\u7684\u6761\u4ef6\n            r = mid - 1\n\n        if ...: # \u5173\u4e8enums[mid]\u7684\u6761\u4ef6\n            ans = mid\n            break\n\n        mid = (l + r) // 2\n    return ans  \n</code></pre></li> </ul> <p>\u9898:</p> <ul> <li>Insert Interval (leetcode: #57_)</li> <li>Lintcode #483:(ans: https://www.jiuzhang.com/problem/copy-books-ii/, quite similar to server selection under greedy, but not the same problem type)</li> <li>Find Peak element(Leetcode: #162)</li> <li>Find the range(Leetcode: #34)</li> </ul> <p><pre><code>def insert(self, intervals: List[List[int]], newInterval: List[int]) -&gt; List[List[int]]:\n\n        if len(intervals) == 0:\n            return [newInterval]\n\n        if len(intervals) == 1:\n            if newInterval[0] &gt;= intervals[0][0]:\n                if newInterval[0] &lt;= intervals[0][1]:\n                    return [[intervals[0][0], max(intervals[0][1], newInterval[1])]]\n                else:\n                    return [intervals[0], newInterval]\n            else:\n                if newInterval[1] &gt;= intervals[0][0]:\n                    return [[newInterval[0], max(newInterval[1], intervals[0][1])]]\n                else:\n                    return [newInterval, intervals[0]]\n\n        lower_start, upper_start = self.find_position(intervals, newInterval, 0)\n        lower_end, upper_end = self.find_position(intervals, newInterval, 1)\n        if lower_start == None:\n          if upper_end == None:\n            return [newInterval]\n          if newInterval[1] &gt;= intervals[upper_end][0]:\n                return [[newInterval[0], max(newInterval[1], intervals[upper_end][1])]] + intervals[1:]\n          else:\n              return [newInterval] + intervals[upper_end:]\n        if newInterval[0] &lt;= intervals[lower_start][1]:\n            if upper_end == None:\n              return intervals[:lower_start] + [[intervals[lower_start][0], newInterval[1]]]\n            if newInterval[1] &gt;= intervals[upper_end][0]:\n                return intervals[:lower_start] + [[intervals[lower_start][0], intervals[upper_end][1]]] + intervals[upper_end + 1:]\n            else:\n                return intervals[:lower_start] + [[intervals[lower_start][0], newInterval[1]]] + intervals[upper_end:]\n        else:\n            if upper_end == None:\n              return intervals[:lower_start + 1] + [newInterval]\n            if newInterval[1] &gt;= intervals[upper_end][0]:\n                return intervals[:lower_start + 1] + [[newInterval[0], intervals[upper_end][1]]] + intervals[upper_end + 1:]\n            else:\n                return intervals[:lower_start + 1] + [newInterval] + intervals[upper_end:]\n\n\n    def find_position(self, intervals: List[List[int]], newInterval: List[int], index) -&gt; List[int]:\n      if newInterval[index] &lt; intervals[0][index]:\n        return [None, 0]\n      if newInterval[index] &gt; intervals[-1][index]:\n        return [len(intervals) - 1, None]\n\n      lower = 0\n      upper = len(intervals) - 1\n      mid = (upper + lower) // 2\n      while upper != lower + 1:\n          if intervals[mid][index] &lt; newInterval[index]:\n              lower = mid\n          else:\n              upper = mid\n          mid = (lower + upper) // 2\n      return [lower, upper]\n</code></pre> Search in Rotated Sorted Array (Leetcode: #33) <pre><code>## find the first number in nums that is smaller than target\n## edge case:\n## \u00a0 nums=[3, 5], target = 1\ndef binaryFind_num_0(nums, target):\n\u00a0 \u00a0 if nums[0] &lt; nums[-1]:\n\u00a0 \u00a0 \u00a0 \u00a0 return len(nums)\n\n\u00a0 \u00a0 l = 0\n\u00a0 \u00a0 r = len(nums) - 1\n\u00a0 \u00a0 mid = (l + r) // 2 \u00a0\n\u00a0 \u00a0 ans = mid\n\u00a0 \u00a0 while l &lt;= r:\n\u00a0 \u00a0 \u00a0 \u00a0 # mid is on the left half\n\u00a0 \u00a0 \u00a0 \u00a0 if nums[mid] &gt; target:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 l = mid + 1\n\n\u00a0 \u00a0 \u00a0 \u00a0 # mid is on the right half\n\u00a0 \u00a0 \u00a0 \u00a0 elif nums[mid] &lt; target:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 r = mid - 1\n\n\u00a0 \u00a0 \u00a0 \u00a0 if mid - 1 &gt;=0 and nums[mid - 1] &gt; nums[mid]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ans = mid\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\n\u00a0 \u00a0 \u00a0 \u00a0 mid = (l + r) // 2\n\u00a0 \u00a0 return ans\n\n\ndef binaryFind(nums, target):\n\u00a0 \u00a0 l = 0\n\u00a0 \u00a0 r = len(nums) - 1\n\u00a0 \u00a0 ans = len(nums)\n\u00a0 \u00a0 while l &lt;= r:\n\u00a0 \u00a0 \u00a0 \u00a0 mid = (l + r) // 2\n\u00a0 \u00a0 \u00a0 \u00a0 if nums[mid] &gt;= target:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 r = mid - 1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ans = mid\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 l = mid + 1\n\u00a0 \u00a0 return ans  \n\nclass Solution(object):\n\u00a0 \u00a0 def search(self, nums, target):\n\u00a0 \u00a0 \u00a0 \u00a0 if nums[-1] &lt; nums[0]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 num_0_pos = binaryFind_num_0(nums[:len(nums) - 1], nums[-1])\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if target == nums[-1]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return len(nums) - 1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 elif target &gt; nums[-1]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 target_pos = binaryFind(nums[:num_0_pos], target)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return target_pos if target_pos &lt; len(nums) and \\\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nums[target_pos] == target else -1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 target_pos = binaryFind(nums[num_0_pos:], target) + num_0_pos\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return target_pos if \u00a0target_pos &lt; len(nums) and \\\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nums[target_pos] == target else -1\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 target_pos = binaryFind(nums, target)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return target_pos if target_pos &lt; len(nums) and \\\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nums[target_pos] == target else -1  \n\nif __name__ == \"__main__\":\n\u00a0 \u00a0 nums = [3,5,1]\n\u00a0 \u00a0 target = 5\n\u00a0 \u00a0 print(Solution().search(nums, target))\n</code></pre></p>"},{"location":"Algorithm/#2","title":"2. \u6ed1\u52a8\u7a97\u53e3","text":"<p>\u9898\u76ee:</p> <ul> <li>leetcode #3</li> <li>Permutation in String, leetcode #567 / Find All Anagrams in a String, leetcode #438</li> <li>Minimum Window Substring\uff0c leetcode #76</li> <li>Max Consecutives one III, leetcode #1004</li> </ul> <p>\u601d\u60f3:</p> <ol> <li>\u51c6\u5907\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u7a97\u53e3\u5de6\u7aef\u53ebhead, \u4e00\u4e2a\u6307\u5411\u7a97\u53e3\u53f3\u7aef\u53ebtail</li> <li>\u51c6\u5907\u4e00\u4e2a\u96c6\u5408\uff0c\u7528\u4e8e\u88c5\u7a97\u53e3\u4e2d\u7684\u6240\u6709\u5143\u7d20</li> <li>\u4e0d\u65ad\u79fb\u52a8\u5c3e\u6307\u9488\uff0c\u4e00\u65e6\u5c3e\u6307\u9488\u6307\u5411\u7684\u5143\u7d20\u51fa\u73b0\u5728\u96c6\u5408\u4e2d\uff1b\u5148\u786e\u5b9a\u8be5\u5143\u7d20\u5728\u7a97\u53e3\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5c06head\u79fb\u52a8\u5230\u8be5\u4f4d\u7f6e\u7684\u53f3\u4fa7,\u5e76\u5c06\u96c6\u5408\u91ccstart\u79fb\u52a8\u65f6\u6307\u5411\u7684\u5143\u7d20\u5220\u9664, \u540c\u65f6\u66f4\u65b0\u5c3e\u6307\u9488\u6307\u5411\u5143\u7d20\u7684\u6700\u65b0\u7a97\u53e3\u4f4d\u7f6e</li> </ol> <pre><code>from collections import defaultdict\ndef solution(A: List):\n    head = 0\n    tail = 0\n    windowSet = defaultdict(lambda: -1) \n    # key stores the element inside the window, value stores its index in A\n    # if the element is not inside the window, its value is -1 \n\n    while tail &lt; len(A):\n\n        if windowSet[A[tail]] &gt;= 0:\n            location = windowSet[A[tail]]\n            while head &lt; location + 1:\n                windowSet[head] = 0\n                head += 1\n        windowSet[A[tail]] = tail\n        tail += 1\n</code></pre>"},{"location":"Algorithm/#3-graph","title":"3. Graph","text":"<ul> <li>DFS:<ul> <li>detect cycle<ul> <li>Leetcode #207</li> </ul> </li> </ul> </li> <li>BFS:<ul> <li>level traversal</li> </ul> </li> <li>topological sort</li> <li>Kruskal &amp; Prim algo(Subgraph tree that connects all vertices and with min weight)</li> <li>Single-source shortest path</li> </ul> <p>Runtime: BFS/DFS    &lt; Dijkstra           &lt;  Bellman O(V + E)       O((V + E) logV)</p>"},{"location":"Algorithm/#31-dfs","title":"3.1 DFS","text":"<p>Template: (Runtime: O(V + E)) <pre><code>from collections import defaultdict\ndef dfs(graph, r):\n\u00a0 \u00a0 stack = []\n\u00a0 \u00a0 # store the node and its child node index, return value in base case\n\u00a0 \u00a0 stack.append((r, 0, acc)) \n\u00a0 \u00a0 vertexState = defaultdict(lambda :0) \n\u00a0 \u00a0 \n\u00a0 \u00a0 # represent the return result of next recursive call\n\u00a0 \u00a0 last_recur_ret = None\n\n\u00a0 \u00a0 while stack:\n\u00a0 \u00a0 \u00a0 \u00a0 v, curr_child_index = stack[-1] \n\u00a0 \u00a0 \u00a0 \u00a0 \n\u00a0 \u00a0 \u00a0 \u00a0 # code block that is executed before recursive call\n\u00a0 \u00a0 \u00a0 \u00a0 # if last_recur_ret is None:\n    \u00a0 \u00a0 \u00a0 \u00a0 # ....\n\u00a0 \u00a0 \u00a0 \u00a0 # code block that is executed after recursive call\n\u00a0 \u00a0 \u00a0 \u00a0 if last_recur_ret is not None:\n    \u00a0 \u00a0 \u00a0 \u00a0 # perform operations on last recursive call result\n    \u00a0 \u00a0 \u00a0 \u00a0 # to have a branch that is done after the first recurse call:\n    \u00a0 \u00a0 \u00a0 \u00a0 # if stack[-1][2] == acc:\n    \u00a0 \u00a0 \u00a0 \u00a0 #    ....\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 stack[-1][2] = fn(stack[-1][2], \u00a0last_recur_ret[1])\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 last_recur_ret = None\n\n\u00a0 \u00a0 \u00a0 \u00a0 if vertexState[v] == 0:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 vertexState[v] = 1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n\u00a0 \u00a0 \u00a0 \u00a0 if curr_child_index &lt; len(graph[v]):\n    \u00a0 \u00a0 \u00a0 \u00a0 if vertexState[graph[v][curr_child_index]] == 0:\n        \u00a0 \u00a0 \u00a0 \u00a0 stack[-1][1] = curr_child_index + 1\n        \u00a0 \u00a0 \u00a0 \u00a0 stack.append((graph[v][curr_child_index], 0))\n        \u00a0 \u00a0 \u00a0 \u00a0 continue\n\n\u00a0 \u00a0 \u00a0 \u00a0 vertexState[v] = 2\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n\u00a0 \u00a0 \u00a0 \u00a0 last_recur_ret = stack.pop()\n\u00a0 \u00a0return last_recur_ret\n</code></pre></p>"},{"location":"Algorithm/#311-detect-cycle","title":"3.1.1 Detect Cycle","text":"<p>\u601d\u8def:</p> <ol> <li> <p>\u6bcf\u6b21\u8fdb\u5165recursive call\u524d\uff0c\u5c06curr_node\u4f5c\u4e3aparent node pass\u8fdb\u4e0b\u4e00\u4e2arecursive call, \u5728\u4e0b\u6b21recursive call\u4e2d\u5148\u68c0\u67e5neighbour\u662f\u5426\u4e3aparent, \u5982\u679c\u4e0d\u662f\uff0c\u518d\u68c0\u67e5\u5176status\u662f\u5426\u662f1\uff0c\u5982\u679c\u662f\uff0c\u76f4\u63a5return True\u8868\u793a\u6709cycle \u9898:</p> </li> <li> <p>leetcode: #207</p> </li> </ol>"},{"location":"Algorithm/#32-bfs","title":"3.2 BFS","text":"<p>Runtime: O(V + E)</p> Python <pre><code>from collections import deque, defaultdict\ndef bfs(G, v):\n    q = deque([])\n    q.append(v)\n\n    visited = defaultdict(lambda : False)\n    visited[v] = True\n    while q:\n        v = q.popleft()\n        for neighbour in G[v]:\n            if not visited[neighbour]:\n                q.append(neighbour)\n                visited[neighbour] = True\n</code></pre>"},{"location":"Algorithm/#321-level-order-traversal","title":"3.2.1 level order traversal","text":"<pre><code>from collections import deque, defaultdict\ndef bfs(G, v):\n    q = deque([])\n    q.append(v)\n\n    visited = defaultdict(lambda : False)\n    visited[v] = True\n\n    while q:\n        n = len(q)\n        for _ in range(n):\n            v = q.popleft():\n            # code block 1:\n                # ...\n            for neighbour in G[v]:\n                if not visited[neighbour]:\n                    visited[neighbour] = True\n                    q.append(neighbour)\n</code></pre> <ul> <li>Binary Tree ZigZag Level order traversal(Leetcode: #103)</li> <li>Populating Next Right Pointers in Each Node\uff08Leetcode: #116)</li> </ul>"},{"location":"Algorithm/#322-shortest-path","title":"3.2.2 Shortest path","text":"<p>\u9898:</p> <ul> <li>\u5355\u8bcd\u63a5\u9f99, leetcode #127</li> <li>Sliding Puzzle, leetcode #773</li> </ul>"},{"location":"Algorithm/#33-single-source-shortest-path","title":"3.3 Single-source shortest path","text":"<p>What is the problem:</p> <p>Given a graph and a pair of vertices (u, v), we want to find the path from u to v s.t the sum of weights from u to v is minimized</p> <p>Restriction for Bellman-Ford:</p> <ul> <li> <p>The graph cannot contain a cycle where the sum of the edges of the cycle is negative and can be reached from starting vertex s Practice:</p> </li> <li> <p>find shortest path on directed/undirected graph Bellman-Ford <code>O(VE)</code>: <pre><code>from collections import defaultdict\ndef relax(u, v, w, short_path):\n    if short_path[u] + w &lt; short_path[v]:\n        short_path[v] = short_path[u] + w\n        return True\n    return False\n\ndef BellmanFord(G, s):\n    # Initialize single source and edges\n    shortest_path = defaultdict(lambda :float(\"inf\"))\n    shortest_path[s] = 0\n\n    # relax each edge of u\n    for _ in range(len(G) - 1):\n        for u in G:\n            for v, w in G[u].items():\n                if shortest_path[u] != float(\"inf\"):\n                    relax(u, v, w, shortest_path)\n\n    # detect negative cycle\n    for u in G:\n        for v, w in G[u].items():\n            if shortest_path[u] != float(\"inf\") and \\\n            shortest_path[u] + w &lt; shortest_path[v]:\n                return False\n\n    return True         \n</code></pre></p> </li> </ul> <p>Restriction for Dijkstra:</p> <ul> <li>The graph cannot have negative weight edges Practice</li> <li>find shortest path on directed/undirected graph Dijkstra's algorithm(<code>O((V+E)logV)</code>): <pre><code>from collections import defaultdict\nfrom heapq import heappop\ndef relax(u, v, w, short_path):\n    if short_path[u] + w &lt; short_path[v]:\n        short_path[v] = short_path[u] + w\n        return True\n    return False\n\ndef dijkstra(G, s):\n    # stores the nodes on the shortest path\n    # for each node as key, store it distance from s\n    shortest_path = defaultdict(lambda : (float(\"inf\")))\n    shortest_path[s]= 0\n    Q = [(0, s)]\n    while Q:\n        curr_distance, u = heappop(Q)\n\n        if curr_distance &gt; short_path[u]:\n            continue\n\n        # relax each edge of u\n        for v, w in G[u].items():\n            if relax(u, v, w, shortest_path):\n                heapq.heappush(Q, (shortest_path[v], v))\n    return shortest_path\n</code></pre></li> </ul> <p>\u9898:</p> <ul> <li>Cheapest flights within K stops (leetcode #787)</li> <li>Network Delay time(leetcode #743)</li> </ul>"},{"location":"Algorithm/#34-all-pairs-shortest-path","title":"3.4 All-pairs shortest path","text":"<p>Floyd-Warshal(\\(O(V^3)\\)) - When to use: when |E| &gt; \\(|V|^2\\) - restriction: the graph cannot contain negative cycles (where the sum of the edges in a cycle is negative) <pre><code>def FloydWarshal(G):\n    # G must be a |V|x|V| matrix with each entry as the weight value;\n    # Otherwise, we will have to loop through each edge of G to construct D,\n    # which is not allowed\n    num_vertices = len(graph)  \n    dist = [row[:] for row in graph] # Create a copy of the graph  \n\n    # Iterate through all possible intermediate vertices 'k'  \n    for k in range(num_vertices):  \n        # Iterate through all possible source vertices 'i'  \n        for i in range(num_vertices):  \n            # Iterate through all possible destination vertices 'j'  \n            for j in range(num_vertices):  \n            # If vertex 'k' is on the shortest path from 'i' to 'j',  \n            # then update the distance  \n                if dist[i][k] != float('inf') and \\\n                dist[k][j] != float('inf'):  \n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])  \n    return dist\n</code></pre></p>"},{"location":"Algorithm/#35-mst","title":"3.5 MST","text":"<p>What is MST</p> <p>an acyclic tree whose: -  edge set is a subset of G - connect all vertices - sum of weights of all edges are minimized</p> <p>Kruskal's algorithm<code>O(E lg(V))</code> <pre><code>## class DisjointSet:\n\ndef createMST(G, w):\n    A = set()\n\n    ds = DisjointSet()\n    for v in G.keys():\n        ds.makeSet(v)\n\n    # sort the edges of G.E into nondecreasing order by weight w\n    E = sort(G)\n\n    for (u, v) in E:\n        if ds.find(u) != ds.find(v):\n            A.add((u, v))\n            ds.union(u, v)\n    return A\n</code></pre></p> <p>Prim's algorithm: <code>O(E + V lg(V))</code> <pre><code>def prim(graph, start_vertex):\n    # graph example: {'A': {'B': 1, 'C': 4}, 'B': {'A': 1, 'C': 2, 'D': 5}}\n    mst = [] # Stores the edges of the Minimum Spanning Tree  \n    visited = set() # Keeps track of visited vertices  \n\n    # Priority queue (min-heap) to store edges, ordered by weight  \n    # Format: (weight, from_vertex, to_vertex)  \n    edges = []  \n\n    # Start with the initial vertex  \n    visited.add(start_vertex)  \n    for neighbor, weight in graph[start_vertex].items():  \n        heapq.heappush(edges, (weight, start_vertex, neighbor))  \n\n    while edges: \n        # Get the edge with the minimum weight \n        weight, u, v = heapq.heappop(edges)  \n\n        if v not in visited:  \n            visited.add(v)  \n            mst.append((u, v, weight))  \n\n        # Add all edges connected to the newly visited vertex to the heap \n        for neighbor_of_v, weight_to_neighbor in graph[v].items():  \n            if neighbor_of_v not in visited:  \n                heapq.heappush(edges, \\\n                (weight_to_neighbor, v, neighbor_of_v))  \n\n    return mst\n</code></pre></p>"},{"location":"Algorithm/#4-greedy-choiice","title":"4. Greedy choiice","text":"<ul> <li>Server selection(snow flake OA) <p>\u628an\u672c\u4e66\u5206\u7ed9k\u4e2a\u4eba\u590d\u5370\uff0c\u60f3\u8981\u4f7f\u6bcf\u4e2a\u4eba\u590d\u5370\u7684\u603b\u65f6\u95f4\u7684\u6700\u5927\u503c\u6700\u5c0f\u5316\u3002\u5f88\u660e\u663e\u662f\u4e00\u4e2a\u6c42\u6700\u4f18\u89e3\u7684\u95ee\u9898\uff0c\u5f88\u81ea\u7136\u7684\u60f3\u5230\u7528\u8d2a\u5fc3\u7684\u601d\u60f3\u3002\u56e0\u4e3a\u6bcf\u672c\u4e66\u90fd\u662f\u6ca1\u6709\u5dee\u5f02\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f9d\u6b21\u8d2a\u5fc3\u7684\u4e3a\u6bcf\u4e00\u672c\u4e66\u9009\u62e9k\u4e2a\u4eba\u4e2d\u7684\u6700\u4f18\u4eba\u9009\u3002 \u4ee4times[]\u8868\u793a\u6bcf\u4e2a\u4eba\u590d\u5370\u4e00\u672c\u4e66\u7684\u65f6\u95f4\uff0csum[]\u8868\u793a\u6bcf\u4e2a\u4eba\u590d\u5370\u6240\u82b1\u7684\u603b\u65f6\u95f4\u3002\u82e5\u6b64\u65f6\u5728\u5224\u65ad\u628a\u7b2c i \u672c\u4e66\u7ed9\u54ea\u4e2a\u4eba\u590d\u5370\uff0c\u6b64\u65f6\u524d (i - 1) \u672c\u4e66\u88ab\u590d\u5370\u7684\u6700\u77ed\u65f6\u95f4\u662fminSum\u3002\u5b9e\u73b0\u8fc7\u7a0b\u5982\u4e0b\uff1a\u82e5\u628a\u7b2c i \u672c\u4e66\u7ed9\u7b2c j \u4e2a\u4eba\u590d\u5370\uff0c\u8fd9\u65f6\u7b2c j \u4e2a\u4eba\u6240\u82b1\u7684\u603b\u65f6\u95f4 sum[j] + times[j] \uff0c\u82e5\u8fd9\u4e2a\u603b\u65f6\u95f4\u4e0d\u5927\u4e8eminSum\uff0c\u8bf4\u660e\u5bf9\u7b54\u6848\u6ca1\u5f71\u54cd\uff0c\u90a3\u4e48\u9009\u5176\u4e2d\u4efb\u610f\u4e00\u79cd\u5373\u53ef\uff0c\u7ed3\u675f\u5faa\u73af\u4eba\u9009\uff1b \u82e5\u628a\u7b2c i \u672c\u4e66\u7ed9\u7b2c j \u4e2a\u4eba\u590d\u5370\uff0c\u8fd9\u65f6\u7b2c j \u4e2a\u4eba\u6240\u82b1\u7684\u603b\u65f6\u95f4 sum[j] + times[j] \uff0c\u82e5\u8fd9\u4e2a\u603b\u65f6\u95f4\u5927\u4e8eminSum\uff0c\u8bf4\u660e\u7b54\u6848\u4f1a\u53d8\u5927\uff0c\u90a3\u4e48\u6211\u4eec\u7ee7\u7eed\u5224\u65ad\u4e0b\u4e00\u4e2a\u4eba\u9009\uff0c\u9009\u62e9\u4ee4\u7b54\u6848\u589e\u52a0\u7684\u6700\u5c11\u7684\u4e00\u79cd\u60c5\u51b5\uff1b\u6bcf\u6b21\u9009\u62e9\u7ed3\u675f\u540e\u90fd\u8981\u66f4\u65b0\u4e00\u6b21\u7b54\u6848\uff0cminSum = max(Minsum, sum[\u88ab\u9009\u62e9\u7684\u4eba]) \u3002</p> </li> </ul> <p><pre><code>sort time from low to high\nsum = []\nappend (lowest time, index of it in times) to sum\nlet s be the set that contains people are copying at the same time\nadd the people who has the loest to sum\nlet s_prime be the complimentary set\nfor each i = 1 to n:\n    find the lowest time tuple in sum\n    put the people from the tuple from s to s_prime\n    find people with the lowest time in s_prime\n    if that people's time plus the time in tuple is greater than some people p1,\n        add p1's time and p1 to sum\n    else:\n        modify the tuple's time and index to that people\n</code></pre> - \u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217(Leetcode #334)     - Longest increasing subsequence(Leetcode #300, general version of #334)     - Russian Doll Envelopes, leetcode #354 - \u4efb\u52a1\u8c03\u5ea6\u5668 Leetcode #621 - jump game II, leetcode #45 / jump game, leetcode #55</p> <p>\u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217(Leetcode #334) - \u601d\u8def: loop\u4e00\u8fb9array, \u6bcfloop\u4e00\u4e2a\u5143\u7d20<code>array[i]</code>, \u7ef4\u62a4\u4e24\u4e2a\u53d8\u91cf: small\u548cmid, small\u4e3a<code>array[0..i]</code>\u6700\u5c0f\u7684element, mid\u4e3a<code>array[0..i]</code>\u4e2d\u5927\u4e8e<code>small</code>\u6700\u5c0f\u7684element <pre><code>class Solution(object):\n    def increasingTriplet(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"        \n        small = nums[0]\n        mid = float(\"inf\")\n\n        for i in range(1, len(nums)):\n            if nums[i] &lt; small:\n                small = nums[i]\n            elif nums[i] &gt; small:\n                if nums[i] &lt; mid:\n                    mid = nums[i]\n                elif nums[i] &gt; mid:\n                    return True\n        return False\n</code></pre></p>"},{"location":"Algorithm/#5-dp","title":"5. DP","text":"<ul> <li>lintcode 151</li> <li>lintcode1850</li> <li>task scheduling(snowflake OA)</li> <li>Palindrome/substring<ul> <li>Longest Palindrome substring(Leetcode #5)</li> </ul> </li> <li>House Robber, Leetcode #198</li> </ul>"},{"location":"Algorithm/#51-palindromesubstring","title":"5.1 Palindrome/substring","text":"<p>\u601d\u8def: \u51c6\u5907\u4e00\u4e2adp\u7684dictionary, dp\u4ee5(i, j)\u4e3akey, \u5176\u4e2d(i, j)\u8868\u793a<code>s[i..j]</code>, <code>dp[(i, j)]</code> \u8868\u793a<code>s[i..j]</code>\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\u4e3aTrue/False</p> <p>Longest Palindrome substring(Leetcode #5) (Note: Leetcode sometimes only accept bottom-to-top DP, and does not accept top-to-bottom recursive DP, leetcode #5 is an example)</p> <p>bottom-to-top DP soln: <pre><code>from collections import defaultdict\nclass Solution(object):\n    def longestPalindrome(self, s):       \n        dp = defaultdict(lambda :-1)\n        acc = s[0]\n        for i in range(len(s)):\n            dp[(i, i)] = True\n\n        for i in range(len(s) - 1):\n\n            dp[(i, i + 1)] = s[i] == s[i + 1]\n\n            if dp[(i, i + 1)] and len(acc) == 1:\n                acc = s[i:i+2]\n\n\n        for L in range(2, len(s)):\n            for i in range(len(s) - L):\n                if s[i] != s[i + L]:\n                    dp[(i, i + L)] = False\n                else:\n                    dp[(i, i + L)] = dp[(i + 1, i + L -1)]\n\n                    if dp[(i, i + L)] == True and L + 1 &gt; len(acc):\n                        acc = s[i:i + L + 1]\n        return acc\n</code></pre></p> <p>Top-to-bottom recursive soln(does not work for large input): <pre><code>from collections import defaultdict\ndef dp_recursive_helper(dp, s, i, j):\n    if i == j:\n        dp[(i, j)] = 1\n        return True\n\n    if j == i + 1:\n        dp[(i, j)] = 1 if s[i] == s[j] else 0\n\n    if dp[(i, j)] != -1:\n        return dp[(i, j)]\n\n    if s[i] != s[j]:\n        dp[(i, j)] = 0\n    else:\n        dp[(i, j)] = dp_recursive_helper(dp, s, i + 1, j - 1)\n\n\n    return dp[(i, j)]\n\nclass Solution(object):\n    def longestPalindrome(self, s): \n        dp = defaultdict(lambda :-1)\n\n        for i in range(len(s)):\n            for j in range(i, len(s) - 1):\n                is_palindrome = dp_recursive_helper(dp, s, i, j)\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if is_palindrome:\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if j - i + 1 &gt; len(acc):\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 acc = s[i:j+1]\n\n\u00a0 \u00a0 \u00a0 \u00a0 return acc              \n</code></pre></p>"},{"location":"Algorithm/#52-other","title":"5.2 Other","text":"<ul> <li>Coin Change(Leetcode #522) \u603b\u7ed3: dp\u4e2d, \u5047\u8bbe\u4e00\u4e2arange\u4e3a\\(c * 10^4\\) \u5230\\(10^5\\), \u53ef\u4ee5\u4f5c\u4e3adp\u7684\u4e00\u4e2afor loop\u4e00\u4e2a\u4e00\u4e2a\u5faa\u73af, \u5982\u4e0bexample, \u56e0\u800c\uff0c\u6c38\u8fdc\u8981\u68c0\u67e5input size <pre><code>class Solution(object):\n    def coinChange(self, coins, amount):\n        \"\"\"\n        :type coins: List[int]\n        :type amount: int\n        :rtype: int\n        \"\"\"\n\n        dp = defaultdict(lambda :-1)\n\n        dp[0] = 0\n\n        for coin in coins:\n            for x in range(coin, amount + 1):\n                if dp[x - coin] != -1:\n                    if dp[x] == -1:\n                        dp[x] = dp[x - coin] + 1\n                    else:\n                        dp[x] = min(dp[x], dp[x - coin] + 1)\n        return dp[amount]\n</code></pre></li> </ul>"},{"location":"Algorithm/#6-backtracing","title":"6. backtracing","text":"<p>https://leetcode.cn/problems/combination-sum/solutions/14697/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-m-2/</p> <p>\u56fe\u4e2d\u4e3a\u55654\u5206\u652f\u5728\u641c\u7d22\u7684\u65f6\u5019\u4e0d\u5728\u8003\u86512:</p> <p>WTS: \u5bf9\u6240\u6709\u5c42\uff0c\u5047\u8bbe\u7b2c\u4e00\u4e2a\u4f7f\u7528\u7684candidate\u662fx, \u5047\u8bbe\u7b2c\u4e8c\u4e2a\u4f7f\u7528\u7684candidate\u662fy, target\u662fz, \u90a3\u4e48y\u5206\u652f\u4e0b\u6240\u6709\u5305\u542bx\u7684\u8def\u5f84\u90fd\u88abx\u5206\u652f\u5305\u542b(\u5373\u641cy\u5206\u652f\u4e0d\u9700\u8981\u8003\u8651x)</p> <ul> <li> <p>\u5047\u8bbey\u5206\u652f\u4e0d\u5b58\u5728\u5305\u542bx\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u4e0d\u9700\u8981\u8003\u8651x, \u8fd9\u79cdcase\u7ed3\u675f</p> </li> <li> <p>\u5047\u8bbey\u5206\u652f\u5b58\u5728\u5305\u542bx\u7684\u8def\u5f84\uff0c\u4e5f\u5c31\u662f\u8bf4z &gt; y + x, \u90a3\u4e48x\u5206\u652f\u4e0b\u4e5f\u5b58\u5728\u4e00\u6761\u8def\u8def\u5f84\u5305\u542by, x\u5206\u652f\u4e0b\u7684y\u8def\u5f84\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9(z - x-y)\u4e0b\u5305\u542b\u4e86\u6240\u6709\u603b\u548c\u4e3a(z - x -y)\u7684\u8def\u5f84\u4e5f\u5c31\u548cy\u5206\u652f\u4e0b\u5305\u542bx\u7684\u8def\u5f84\u8282\u70b9\u91cd\u5408</p> </li> </ul>"},{"location":"Algorithm/#7-prefix-sum-array","title":"7. Prefix sum &amp; array","text":"<p>\u4ec0\u4e48\u53eb\u524d\u7f00\u548c\u6570\u7ec4:</p> <p>\u7ed9\u4e00\u4e2a\u6570\u7ec4a = [a1, a2, ... aN], a\u7684\u524d\u7f00\u548c\u6570\u7ec4\u662f a = [a1, a1 + a2, a1+a2+a3, ... (a1 + a2 +...aN)]</p> <ul> <li>House Robber, Leetcode #198</li> <li>Maximum Subarray, leetcode #53 </li> <li>Maximum Product Subarray, leetcode #152</li> </ul>"},{"location":"Algorithm/#8","title":"8. \u53cc\u6307\u9488","text":""},{"location":"Algorithm/#81","title":"8.1 \u524d\u540e\u6307\u9488","text":"<ul> <li>three sum(K-sum)</li> </ul> PythonJavascript <pre><code>def twoSum(nums, startIndex, endIndex, target):\n    phead = startIndex\n    ptail = endIndex\n    acc = []\n    while phead &lt; ptail:\n        curr_sum = nums[phead] + nums[ptail]\n        if curr_sum &gt; target:\n            ptail -= 1\n        elif curr_sum &lt; target:\n            phead += 1\n        else:\n            acc.append([nums[phead], nums[ptail]])\n\n            while phead &lt; ptail and nums[phead] == nums[phead + 1]:\n                phead += 1\n            phead += 1\n\n            while phead &lt; ptail and nums[ptail] == nums[ptail - 1]:\n                ptail -= 1 \n            ptail -= 1\n    return acc\n\n\nclass Solution(object):\n\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n\n        nums.sort()\n        acc = []\n        for i in range(len(nums) - 2):\n            if i &lt;= 0 or nums[i] != nums[i - 1]:\n                curr_pairs = twoSum(nums, i + 1, len(nums) - 1, -nums[i])\n                for curr_pair in curr_pairs:\n                    acc.append([nums[i], curr_pair[0], curr_pair[1]])\n        return acc\n</code></pre> <pre><code>console.log()\n</code></pre>"},{"location":"Algorithm/#82","title":"8.2 \u5feb\u6162\u6307\u9488","text":"<p>\u601d\u8def: \u6709\u56db\u79cd\u601d\u8def\uff1b - \u7b2c\u4e00\u79cd\uff0c\u7ef4\u62a4\u4e24\u4e2a\u6307\u9488\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u5728\u7b2c\u4e00\u4e2a\u6307\u9488k\u4e2a\u4f4d\u7f6e\u4e4b\u540e\u4f5c\u4e3a\u5feb\u6307\u9488\uff0c\u540c\u65f6\u79fb\u52a8\u4e24\u6307\u9488,\u5feb\u6307\u9488\u5230\u8fbe\u672b\u5c3e\u540e\uff0c\u6ee1\u6307\u9488\u5230\u8fbe\u672b\u5c3e\u7b2ck\u4e2a\u4f4d\u7f6e;      - Remove Nth Node From End of List, leetcode #19 - \u7b2c\u4e8c\u79cd, \u7ef4\u62a4\u4e24\u4e2a\u6307\u9488, \u7b2c\u4e8c\u4e2a\u6307\u9488\u7684step\u4e3a\u7b2c\u4e00\u4e2a\u6307\u9488\u79fb\u52a8step\u7684\u4e24\u500d, \u540c\u65f6\u79fb\u52a8\u4e24\u6307\u9488, \u5f53\u7b2c\u4e8c\u4e2a\u6307\u9488\u5230\u8fbe\u672b\u5c3e\u65f6, \u7b2c\u4e00\u4e2a\u6307\u9488\u5230\u8fbe\u4e2d\u70b9     - Middle of the Linked List, leetcode #876     - \u5224\u65ad\u73af\u8d77\u70b9([[Algorithm#11.3 \u5bfb\u627e\u73af\u8d77\u70b9]]), leetcode #141, leetcode #142 - \u7b2c\u4e09\u79cd, \u7ef4\u62a4\u4e24\u4e2a\u6307\u9488\uff0c\u5feb\u6307\u9488\u7167\u5e38\u6bcf\u4e2aiteration\u524d\u8fdb\u4e00\u4e2a\u5143\u7d20, \u6ee1\u6307\u9488\u5728\u6bcf\u4e2aiteration\u6839\u636e\u7279\u5b9a\u6761\u4ef6\u524d\u8fdb\u4e00\u4e2a\u5143\u7d20 - \u7b2c\u56db\u79cd, \u6ed1\u52a8\u7a97\u53e3 - Others:     - Gas staation, leetcode #134</p> <p>\u6a21\u677f:</p> <ul> <li>\u7b2c\u4e8c\u5f20\u5feb\u6162:     -     ```Python     class Solution: \u00a0 \u00a0 def middleNode(self, head: Optional[ListNode]) -&gt; Optional[ListNode]: \u00a0 \u00a0 \u00a0 \u00a0 p1 = head \u00a0 \u00a0 \u00a0 \u00a0 p2 = p1</li> </ul> <p>while p2 and p2.next: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p1 = p1.next \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p2 = p2.next.next \u00a0 \u00a0 \u00a0 \u00a0 return p1     ``` - \u7b2c\u4e09\u79cd: <pre><code>def fn(arr):\n    p_slow = 0\n    p_fast = 0\n\n    while p_fast &lt; n:\n        # arr[p_slow] satisfies certain condition, we move p_slow\n        if condition(arr[p_slow]):\n            p_slow += 1\n        p_fast += 1\n</code></pre></p>"},{"location":"Algorithm/#9-tree","title":"9. Tree","text":""},{"location":"Algorithm/#91-traversal","title":"9.1  traversal","text":"<ul> <li>Construct Binary Tree from Preorder and Inorder Traversal(Leetcode: #105)</li> </ul>"},{"location":"Algorithm/#92-avl-tree","title":"9.2 AVL Tree","text":"<ul> <li>Convert sorted array to AVL tree(Leetcode #108): <pre><code>def helper(nums, i, j):\n\u00a0 \u00a0 if j &lt; i:\n\u00a0 \u00a0 \u00a0 \u00a0 return None\n\n\u00a0 \u00a0 mid = (i + j) // 2\n\u00a0 \u00a0 root = TreeNode(nums[mid])\n\u00a0 \u00a0 root.left = helper(nums, i, mid - 1)\n\u00a0 \u00a0 root.right = helper(nums, mid + 1, j)\n\u00a0 \u00a0 root.height = 0\n\n\u00a0 \u00a0 if root.left is not None:\n\u00a0 \u00a0 \u00a0 \u00a0 root.height = root.left.height + 1\n\u00a0 \u00a0 if root.right is not None:\n\u00a0 \u00a0 \u00a0 \u00a0 root.height = max(root.height, root.right.height + 1)\n\u00a0 \u00a0 return root\n\ndef sortedArrayToBST(nums):\n\u00a0 \u00a0 helper(nums, 0, len(nums) - 1)\n</code></pre></li> <li>convert binary tree to AVL tree(Leetcode #1382): <pre><code>def solution(root):\n    # step 1: perform in order traversal to the BST to convert it into sorted array\n    # use the above template to convert sorted array into AVL tree\n</code></pre></li> <li>AVL Tree implementation</li> </ul> Python <pre><code>class TreeNode:\n\u00a0 \u00a0 def __init__(self, val):\n\u00a0 \u00a0 \u00a0 \u00a0 self.val = val\n\u00a0 \u00a0 \u00a0 \u00a0 self.left = None\n\u00a0 \u00a0 \u00a0 \u00a0 self.right = None\n\u00a0 \u00a0 \u00a0 \u00a0 self.height = 1\n\nclass AVLTree:\n    # keyFunc takes a, b as inputs\n    # keyFunc returns 1 if a &gt; b, 0 if a == b, -1 if a &lt; b\n    def __init__(self, keyFunc):\n        self.keyFunc = keyFunc\n        self.root = None\n\n    def search(self, value):\n        curr = self.root\n        while curr and self.keyFunc(value, curr.val) != 0:\n            if self.keyFunc(value, curr.val) &gt; 0:\n                curr = curr.left\n            else:\n                curr = curr.right\n        return curr\n\n    def insert(self, value):\n        if self.root is None:\n            self.root = TreeNode(val=value)\n            return self.root\n\n        curr = self.root\n        stack = []\n        while curr:\n            if self.keyFunc(value, curr.val) &gt;= 0:\n                stack.append((curr, 1))\n                curr = curr.right\n            else:\n                stack.append((curr, 0))\n                curr = curr.left\n\n        leaf, side = stack[-1]\n        if side == 1:\n            leaf.right = TreeNode(val=value)\n        else:\n            leaf.left = TreeNode(val=value)\n\n        lastBalancedNode = balanceTree(stack)\n        if lastBalanceNode:\n            self.root = lastBalanceNode\n        return self.root\n\n    def delete(self, value):\n        if self.root is None:\n            return None\n\n        curr = self.root\n        stack = []\n        while curr:\n            if self.keyFunc(value, curr.value) &gt; 0:\n                stack.append((curr, 1))\n                curr = curr.right\n            elif self.keyFunc(value, curr.value) &lt; 0:\n                stack.append((curr, 0))\n                curr = curr.left\n            else:\n                if curr.left is None or curr.right is None:\n                    break\n                # when the deleted node has both children\n                # replace deleted node with the leftmost leaf in \n                # right subtree\n                else:\n                    successor = curr.right\n                    while successor.left:\n                        successor = successor.left\n                    curr.val, success.val = successor.val, curr.val\n                    stack.append((curr, 1))\n                    curr = curr.right\n\n        # case: value does not exist in tree\n        if curr is None:\n            return None\n\n        # case: when value is at the root and root only has one child\n        if len(stack) == 0:\n            self.root = curr.right if curr.left is None else curr.left\n            return curr\n\n        parent, side = stack[-1]\n        if side == 0:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 parent.left = curr.right if curr.left is None else curr.left\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 parent.right = curr.right if curr.left is None else curr.right\n\n        lastBalancedNode = balanceTree(stack)\n        if lastBalancedNode:\n            self.root = lastBalancedNode\n\n        return curr\n\n\n\ndef getHeight(x: TreeNode):\n    return x.height if x else 0\n\ndef leftRotate(x: TreeNode):\n    R = x.right\n    RL = R.left\n\n    # Makes x becomes the root of R's left subtree\n    x.right = RL\n    R.left = x\n\n    # adjust height of R and x\n\u00a0 \u00a0 x.height = 1 + max(getHeight(x.left), getHeight(x.right))\n\u00a0 \u00a0 R.height = 1 + max(getHeight(R.left), getHeight(R.right))\n\u00a0 \u00a0 \n\u00a0 \u00a0 return R\n\u00a0 \u00a0 \ndef rightRotate(x: TreeNode):\n    L = x.left\n\u00a0 \u00a0 LR = L.right\n\n\u00a0 \u00a0 x.left = LR\n\u00a0 \u00a0 L.right = x \n\n\u00a0 \u00a0 x.height = 1 + max(getHeight(x.left), getHeight(x.right))\n\u00a0 \u00a0 L.height = 1 + max(getHeight(L.left), getHeight(L.right))\n\n\u00a0 \u00a0 return L\n\ndef balance(x: TreeNode):\n\u00a0 \u00a0 balance = getHeight(x.left) - getHeight(x.right)\n\u00a0 \u00a0 L = x.left\n\u00a0 \u00a0 R = x.right\n\n\u00a0 \u00a0 if balance &gt; 1:\n\u00a0 \u00a0 \u00a0 \u00a0 leftbalance = getHeight(L.left) - getHeight(L.right)\n\u00a0 \u00a0 \u00a0 \u00a0 if leftbalance &gt;= 0:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return left_Rotate(x) \n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 x.left = left_Rotate(L)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return right_Rotate(x)\n\u00a0 \u00a0 elif balance &lt; -1:\n\u00a0 \u00a0 \u00a0 \u00a0 rightbalance = getHeight(R.left) - getHeight(R.right)\n\u00a0 \u00a0 \u00a0 \u00a0 if rightbalance &lt;= 0:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return left_Rotate(x)\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 x.right = right_Rotate(R)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return left_Rotate(x)\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 return x\n\ndef balanceTree(stack):\n\u00a0 \u00a0 prev = None\n\u00a0 \u00a0 while stack:\n\u00a0 \u00a0 \u00a0 \u00a0 curr, side = stack.pop() \n\n\u00a0 \u00a0 \u00a0 \u00a0 if prev is not None:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if side == 0:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 curr.left = prev\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 curr.right = prev\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 prev = None\n\n\u00a0 \u00a0 \u00a0 \u00a0 curr.height = 1 + max(getHeight(curr.left), getHeight(curr.right))\n\u00a0 \u00a0 \u00a0 \u00a0 \n\u00a0 \u00a0 \u00a0 \u00a0 heightdiff = getHeight(curr.left) - getHeight(curr.right)  \n\u00a0 \u00a0 \u00a0 \u00a0 if heightdiff &gt; 1 or heightdiff &lt; -1:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 prev = balance(curr)\n\u00a0 \u00a0 return prev\n</code></pre>"},{"location":"Algorithm/#10-heap","title":"10. Heap","text":"<p>Heap operation templates:</p> Python <pre><code># swap larger element between parents and one of its children from ith node to the leaf, below is max-heap\n# Effect: makes arr[i:n] a heap, also called heapify\ndef sift_down(arr, n, i):\n\u00a0 \u00a0 curr_parent = i  \n\n\u00a0 \u00a0 while curr_parent &lt; n:\n\u00a0 \u00a0 \u00a0 \u00a0 next_parent = curr_parent\n\u00a0 \u00a0 \u00a0 \u00a0 left_child = 2 * curr_parent + 1\n\u00a0 \u00a0 \u00a0 \u00a0 right_child = 2 * curr_parent + 2\n\n\u00a0 \u00a0 \u00a0 \u00a0 if left_child &lt; n and arr[left_child] &gt; arr[next_parent]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 next_parent = left_child\n\n\u00a0 \u00a0 \u00a0 \u00a0 if right_child &lt; n and arr[right_child] &gt; arr[next_parent]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 next_parent = right_child\n\n\u00a0 \u00a0 \u00a0 \u00a0 if next_parent != curr_parent:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arr[curr_parent], arr[next_parent] = arr[next_parent], arr[curr_parent]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 curr_parent = next_parent\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\n\ndef sift_up(arr, i):\n    curr_i = i  \n    while curr_i &gt; 0:\n        parent_i = (curr_i - 1) &gt;&gt; 1\n        if arr[curr_i] &gt; arr[parent_i]:\n            arr[curr_i], arr[parent_i] = arr[parent_i], arr[curr_i]\n        else:\n            break\n\ndef heappush(arr, item):\n    arr.append(item)\n    sift_up(arr, len(arr) - 1)\n\ndef heappop(arr):\n    tailItem = arr.pop()\n    if len(heap) == 0:\n        return tailItem \n    headItem = arr[0]\n\n    arr[0] = tailItem\n    sift_down(arr, len(arr), 0)\n    return headItem\n\ndef heappushpop(arr, item):\n    if len(arr) == 0:\n        return item\n    if arr[0] &gt; item:   \n        return heappoppush(arr, item)\n    else:\n        return item\n\ndef heappoppush(arr, item)\n    if len(arr) == 0:\n        raise Error(\"err\")\n    # replace the head of the heap with new item, then heapify\n    headItem, arr[0] = arr[0], item\n    sift_down(arr, len(arr), 0)\n    return headItem\n</code></pre> <ul> <li>heapSort<ul> <li>Non-inplace</li> </ul> </li> </ul> pythonJavascript <pre><code>from heapq import heappush, heappop\ndef sort(nums):\n    h = []\n    for value in nums:\n        heappush(h, value)\n\n\u00a0 \u00a0 return [heappop(h) for i in range(len(h))]\n</code></pre> <pre><code>\n</code></pre> <ul> <li>Inplace sort:</li> </ul> python <pre><code>def sort(nums):\n    n = len(nums) \n    # build max heap that extract max key\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(nums, n, i)\n\n    for i in range(n - 1, 0, -1):\n        # moves the largest element to the end of the array\n        nums[0], nums[i] = nums[i], nums[0]\n        # Keeps arr[:n-1] (excluding the last element) a heap\n        heapify(nums, i, 0)\n</code></pre> <ul> <li>K items comparison(Min-heap):<ul> <li>Merge K sorted List(Leetcode #23)</li> </ul> </li> <li>sort Interval<ul> <li>252 Meeting Rooms](https://leetcode.com/problems/meeting-rooms/)</li> <li>253 Meeting Rooms II</li> <li>435 Non-overlapping Intervals</li> </ul> </li> </ul>"},{"location":"Algorithm/#11-linkedlist","title":"11. LinkedList","text":"<ul> <li>\u5408\u5e76LinkedList</li> </ul>"},{"location":"Algorithm/#111-linkedlist","title":"11.1 \u5408\u5e76LinkedList","text":"<ul> <li> <p>\u601d\u8def: </p> </li> <li> <p>\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868, leetcode #21 <pre><code>class Solution:\n\u00a0 \u00a0 def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -&gt; Optional[ListNode]:\n\u00a0 \u00a0 \u00a0 \u00a0 acc = ListNode()\n\u00a0 \u00a0 \u00a0 \u00a0 p = acc\n\u00a0 \u00a0 \u00a0 \u00a0 p1, p2 = list1, list2\n\n\u00a0 \u00a0 \u00a0 \u00a0 while p1 and p2:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if p1.val &lt;= p2.val:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p.next = p1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p1 = p1.next\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p.next = p2\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p2 = p2.next\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p = p.next  \n\n\u00a0 \u00a0 \u00a0 \u00a0 if p1:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 while p1:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p.next = p1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p = p.next\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p1 = p1.next\n\n\u00a0 \u00a0 \u00a0 \u00a0 if p2:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 while p2:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p.next = p2\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p = p.next\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p2 = p2.next\n\u00a0 \u00a0 \u00a0 \u00a0 return acc.next\n</code></pre></p> </li> <li> <p>\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868, leetcode #23</p> <ul> <li>\u601d\u8def: \u6709\u7528\u5230heap</li> </ul> </li> </ul>"},{"location":"Algorithm/#112-linkedlist","title":"11.2 \u5bfb\u627eLinkedList\u5012\u6570\u4f4d\u7f6e\u6216\u4e2d\u70b9","text":""},{"location":"Algorithm/#113","title":"11.3 \u5bfb\u627e\u73af\u8d77\u70b9","text":""},{"location":"Algorithm/#12-disjoint-set","title":"12. Disjoint Set","text":"<p>Operations:</p> <ul> <li>find(<code>O(\u03b1(n))</code>)</li> <li>union(<code>O(\u03b1(n))</code>)</li> <li>makeSet(<code>O(\u03b1(n))</code>) <code>\u03b1(n)</code>is the inverse Ackermann function (which grows slower than log)</li> </ul> <p>Data structure:</p> <pre><code>class DisjointSet:\n    def __init__(self, lst):\n        self.parent = {}\n        self.rank = {}  # the height of each node\n\n    def makeSet(self, x):\n    \"\"\"Add a new element as its own set.\"\"\"\n        if x not in self.parent:\n            self.parent[x] = x\n            self.rank[x] = 0\n\n    def find(self, x):\n    \"\"\"Find the root of x with path compression\"\"\"\n        if x not in self.parent:\n            self.makeSet(x)\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        \"\"\"Union the sets containing x and y\"\"\"\n        root_x = self.find(x)\n        root_y = self.find(y)\n\n        if root_x == root_y:\n            return False\n\n        if self.rank[root_x] &lt; self.rank[root_y]:\n            self.parent[root_x] = root_y\n        elif self.rank[root_y] &lt; self.rank[root_x]:\n            self.parent[root_y] = root_x\n        else:\n            self.parent[root_y] = root_x\n            self.rank[root_x] += 1     \n</code></pre>"},{"location":"Algorithm/#13-trie","title":"13. Trie(\u524d\u7f00\u6811)","text":"<p>\u9898\u76ee: Leetcode #208</p> <p>\u5e94\u7528: \u641c\u7d22\u67e5\u8be2\u65f6,\u641c\u7d22\u5f15\u64ce\u901a\u8fc7\u7528\u6237\u7684\u8f93\u5165\u4f5c\u4e3a\u524d\u7f00\u4ece\u6570\u636e\u5e93\u7684\u9ad8\u9891\u8bcd\u6c47\u4e2d\u53ec\u56de\u6240\u6709\u4ee5\u8be5\u7528\u6237\u7684\u8f93\u5165\u4e3a\u524d\u7f00\u7684\u8bcd\u6c47</p> <p>\u7528\u4e8e\u5b58\u50a8\u5b57\u7b26\u4e32:</p> pythonJava <pre><code>class Trie:\n    # \u6bd4\u6bd4\u8f83\u901a\u7528\u7684\u6a21\u677f #\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.child = dict()\n        self.isword = False  #\u8868\u793a\u8be5Trie node\u662f\u5426\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\n\n    def insert(self, word: str) -&gt; None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        rt= self  #\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01\n        for w in word:\n            if w not in self.child:     #\u6ca1\u6709\uff0c\u5c31\u65b0\u5efa\n                self.child[w] = Trie()\n            rt = rt.child[w]          #\u5f80\u4e0b\u8d70\n        rt.isword = True        #\u6807\u8bb0\u4f4d\n\n\n    def search(self, word: str) -&gt; bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        rt= self  #\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01\n        for w in word:\n            if w not in rt.child:     #\u6709\u5b57\u6bcd\u4e0d\u5728\u8fd9\u6761path\u4e0a\uff0c\u65ad\u4e86\n                return False\n            rt = rt.child[w]          #\u6cbf\u7740path\u5f80\u4e0b\u8d70\n        return rt.isword == True    #\u770bisword\u4f4d\n\n    def startsWith(self, prefix: str) -&gt; bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n        rt = self  #\u76f8\u5f53\u4e8ec++\u7684this\u6307\u9488\uff01\uff01\uff01\n        for w in prefix:\n            if w not in rt.child:     #path\u65ad\u4e86\n                return False\n            rt = rt.child[w]\n        return True\n</code></pre> <pre><code>\n</code></pre>"},{"location":"Algorithm/#14-monostack","title":"14. MonoStack","text":"<p>https://itnext.io/monotonic-stack-identify-pattern-3da2d491a61e</p> <p>What is a monoStack:</p> <p>A monostack is a stack whose elements are monotonically non-decreasing or non-increasing. The monstack has two operations: pop and push(varied based on the type of monostack) to maintain this property. There are 2 types of mono stack:</p> <ul> <li>mono-decreasing:</li> <li>pop: pop out the item at the top of the stack(tail of the array)</li> <li>push(item):<ol> <li>while stack not empty and stack.top &lt; item:</li> <li>pop(stack.top)</li> <li>insert(stack, item)</li> </ol> </li> <li>mono-increasing:</li> <li>pop: pop out the item at the top of the stack</li> <li>push(item):<ol> <li>while stack not empty and stack.top &gt; item:</li> <li>pop(stack.top)</li> <li>insert(stack, item)</li> </ol> </li> </ul> <p>Application of mono-stack:</p> <ol> <li>Find Next-Great-Element and Prev-Great-Element of each array element</li> </ol> <p>For mono nondecreasing stack:</p> <p>we define the following(for each array element <code>arr[i]</code>):</p> <ul> <li>Next-Great-Element(arr[i]): the first value that is greater than <code>arr[i]</code> on the right of <code>arr[i]</code> </li> <li>Prev-Great-Element(arr[i]): the last value that is greater than <code>arr[i]</code> on the left of <code>arr[i]</code></li> </ul> <p>We usually load the array content into a mono stack as above by consistently pushing the element of the array. During the push(item), for each element <code>arr[i]</code> that is popped, Next-Great-Element(arr[i]) is the  newly inserted <code>item</code> and Prev-Great-Element(arr[i]) is the element that is before <code>arr[i]</code> in stack(i.e: the stack top after we pop <code>arr[i]</code>). If we need to use Next-Great-Element(arr[i]) or Prev-Great-Element(arr[i]) of each element <code>arr[i]</code> to solve the problem, consider monostack</p> <ol> <li>find the smallest combination of array element in the array</li> </ol> <p>After loading all elements into the stack, the stack exhibits the following property:</p> <ul> <li>the array element of the stack is in sequential order, where the i^th^ element of the stack must be before the j^th^ element of the stack in original array if i &lt; j</li> <li>Among all sub-sequences from the array that is in sequential order, the sequence in the stack has the smallest lexicographical order comparing with any sequence of the same length(smallest lexicographical order refers to \"A string <code>a</code> is lexicographically smaller than a string <code>b</code> if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears earlier in the alphabet than the corresponding letter in <code>b</code>.If the first <code>min(a.length, b.length)</code> characters do not differ, then the shorter string is the lexicographically smaller one.\")</li> </ul> <p>Application: leetcode: #316</p>"},{"location":"Algorithm/#15-divide-conquer","title":"15. Divide &amp; Conquer","text":"<ul> <li>Search a 2D Matrix II, leetcode #240</li> </ul>"},{"location":"Algorithm/#16-segment-tree","title":"16. Segment Tree","text":"<p>why do we need Segment Tree:</p> <p>When we want to sum an array, the worst runtime is O(n) and update it, the runtime is O(1) If we have equal number of two operations, the total runtime is O(n) However, the update and get sum for a range for segment tree are both <code>O(log n)</code>. A segment tree is an array that exhibits a tree structure</p> <pre><code>def build(arr):\n    n = len(arr)\n    tree = [0] * (2 * n)\n\n    for i in range(n):\n        tree[n + i] = arr[i]\n\n    for i in range(n - 1, 0, -1):\n        tree[i] = tree[i &lt;&lt; 1] + tree[i &lt;&lt; 1 | 1]\n\n## n is the length of arr, update arr[p]\ndef updateTreeNode(n, p, value):\n    i = p + n\n    tree[i] = value\n\n    while i &gt; 1:\n        # i is odd, then i ^ 1 is even, both i and i ^ 1 are children\n        # i is even, then i ^ 1 is odd, both i and i ^ 1 are children\n        tree[i &gt;&gt; 1] = tree[i] + tree[i ^ 1]\n        i &gt;&gt;= 1\n\n## query the sum on interval [l, r), n is the length of arr\ndef query(arr, start, end):\n    res = 0\n    l = start + n\n    r = end + n\n\n    while l &lt; r:\n        # l is odd, odd position in tree is always the right child of parent\n        # l += 1, l becomes the left child of the next parent\n        if l &amp; 1:\n            res += tree[l]\n            l += 1\n\n        # r is odd\n        if r &amp; 1:\n            r -= 1\n            res += tree[r]\n        l &gt;&gt;= 1\n        r &gt;&gt;= 1\n    return res\n</code></pre>"},{"location":"Algorithm/#17-line-sweep","title":"17. Line sweep","text":"<p>Intuition: https://www.youtube.com/watch?v=nNtiZM-j3Pk&amp;list=PLubYOWSl9mItBLmB2WiFU0A_WINUSLtGH code reference:  - https://www.geeksforgeeks.org/dsa/given-a-set-of-line-segments-find-if-any-two-segments-intersect/ - https://panda-man.medium.com/mastering-efficiency-exploring-line-sweep-algorithm-with-python-673e4522e979</p> <p>What is the problem:</p> <p>Given a set of line segments(e.g: <code>[[x1, y1], [x2, y2]]</code>) which are represented by the x, y coordinates of their endpoints, we want to find the total set of intersection points</p>"},{"location":"Algorithm/#171-cross-product-application","title":"17.1 Cross Product application","text":"<p>Computing cross product lies at the heart of many line segments problem. Here are the problems that can be applied: 1. Given 2 directed segments \\(P_0P_1\\) and \\(P_0P_2\\), is \\(P_0P_1\\) clockwise from \\(P_0P_2\\) w.r.t \\(P_0\\)? 2. Given \\(P_0P_1\\) and point \\(P_2\\), is \\(P_2\\) on the left side or right side of \\(P_0P_1\\) ? 3. Do \\(P_1P2\\) and \\(P_3P_4\\) intersect?</p> <ol> <li>Clockwise Problem We have the following property: let \\(P_0\\) be (0, 0):</li> <li>if \\(P_1\\) X \\(P_2\\) &gt; 0,   \\(P_1\\) is clockwise from \\(P_2\\) w.r.t \\(P_0\\)</li> <li>if \\(P_1\\) X \\(P_2\\) &lt; 0,  \\(P_1\\) is counter-clockwise from \\(P_2\\) w.r.t \\(P_0\\)</li> <li> <p>if \\(P_1\\) X \\(P_2\\) = 0, \\(P_1\\) is parallel to \\(P_2\\)</p> </li> <li> <p>Left-side problem Equivalent to determining angle \\(\\angle P_0P_1P_2\\) is counter-clockwise or not:  </p> </li> <li> <p>Intersection To determine intersection, check either of the following:</p> </li> <li>both endpoints of \\(P_1P_2\\) are on both sides of \\(P_3P_4\\) and both endpoints of \\(P_3P_4\\) are on both sides of \\(P_1P_2\\)</li> <li>an endpoint of one segment lies on the other segment</li> </ol> <pre><code>def crossProduct(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    return x1 * y2 - x2 * y1\n\ndef side(segment, p):\n    p1, p2 = segment\n    return crossProduct(p - p1, p - p2)\n\ndef onSegment(segment, p):\n    p1, p2 = segment\n    x1, y1, x2, y2 = p1[0], p1[1], p2[0], p2[1]\n    x, y = p\n\n    return min(x1, x2) &lt;= x &lt;= max(x1, x2) and min(y1, y2) &lt;= y &lt;= max(y1, y2)\n\ndef intersection(P1P2, P3P4):\n    P1, P2 = P1P2[0], P1P2[1]\n    P3, P4 = P3P4[1], P3P4[1]\n\n    P1_side = side(P3P4, P1)\n    P2_side = side(P3P4, P2)\n    P3_side = side(P1P2, P3)\n    P4_side = side(P1P2, P4)\n\n    # first case:\n    if ((P1_side &gt; 0 and P2_side &lt; 0) or (P1_side &lt; 0 and P2_side &gt; 0)) and\\\n        ((P3_side &gt; 0 and P4_side &lt; 0) or (P3_side &lt; 0 and P4_side &gt; 0)):\n        return True\n    elif P1_side == 0 and onSegment(P3P4, P1):\n        return True\n    elif P2_side == 0 and onSegment(P3P4, P2):\n        return True\n    elif P3_side == 0 and onSegment(P1P2, P3):\n        return True\n    elif P4_side == 0 and onSegment(P1P2, P4):\n        return True\n    else:\n        return False\n</code></pre> <p>Implementation(<code>O(n lg n)</code>)</p> <pre><code>## segment: [[[x1, y1], [x2, y2]], [[x1', y1'], [x2', y2']]]\n## each segment is represented as a [[], []], where the first [] contains the\n## (x, y) of left endpoint p1 and the second [] has the right endpoint p2\n## example\n## return a above or lies on b at x0\ndef segmentOrder(a, b, x0):\n\u00a0 \u00a0 intersect = intersection(a, b)\n\u00a0 \u00a0 if not intersect:\n\u00a0 \u00a0 \u00a0 \u00a0 leftSegment = a if a[0] &lt; b[0] else b\n\u00a0 \u00a0 \u00a0 \u00a0 rightSegment = b if leftSegment == a else a\n\u00a0 \u00a0 \u00a0 \u00a0 if side(leftSegment, rightSegment[0]) &gt; 0:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return leftSegment == b\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return leftSegment == a\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 # x be the intersection point of a &amp; b\n\u00a0 \u00a0 \u00a0 \u00a0 # x0 &gt; x\n\u00a0 \u00a0 \u00a0 \u00a0 Right_to_intersection = ((a[1][0] - a[0][0]) * (b[1][0] - b[0][0]) * (b[0][1] - a[0][1]) - (a[1][0] - a[0][0]) * (b[1][1] - b[0][1]) * b[0][0] + (b[1][0] - b[0][0]) * (a[1][1] - a[0][1]) * a[0][0]) \u00a0&lt; \\\n\n\u00a0 \u00a0 \u00a0 \u00a0 ((b[1][0] - b[0][0]) * (a[1][1] - a[0][1]) * x0 \u00a0- (a[1][0] - a[0][0]) * (b[1][1] - b[0][1]) * x0)\n\u00a0 \u00a0 \u00a0 \u00a0 if Right_to_intersection:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return a[1][1] &gt; b[1][1]\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return a[0][1] &gt;= b[0][1]\n\n\ndef above(T: AVLTree, s):\n\u00a0 \u00a0 return T.predecessor(s)\n\n\ndef below(T: AVLTree, s):\n\u00a0 \u00a0 return T.successor(s)\n\n\n## return True if e1 &gt; e2\ndef comparison(e1, e2):\n\u00a0 \u00a0 if e1[0] &gt; e2[0]:\n\u00a0 \u00a0 \u00a0 \u00a0 return True\n\u00a0 \u00a0 elif e1[0] &lt; e2[0]:\n\u00a0 \u00a0 \u00a0 \u00a0 return False\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 if e1[2] &gt; e2[2]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return True\n\u00a0 \u00a0 \u00a0 \u00a0 elif e1[2] &lt; e2[2]:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return False\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return e1[1] &gt; e2[1]\n\n\ndef sift_down(h, n, i):\n\u00a0 \u00a0 curr_p = i\n\u00a0 \u00a0 while curr_p &lt; n:\n\u00a0 \u00a0 \u00a0 \u00a0 next_p = curr_p\n\u00a0 \u00a0 \u00a0 \u00a0 l = 2 * curr_p + 1\n\u00a0 \u00a0 \u00a0 \u00a0 r = 2 * curr_p + 2\n\n\u00a0 \u00a0 \u00a0 \u00a0 if l &lt; n and comparison(h[next_p], h[l]):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 next_p = l\n\u00a0 \u00a0 \u00a0 \u00a0 if r &lt; n and comparison(h[next_p], h[r]):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 next_p = r\n\u00a0 \u00a0 \u00a0 \u00a0 if curr_p != next_p:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 h[curr_p], h[next_p] = h[next_p], h[curr_p]\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 curr_p = next_p\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\n\n\ndef sortEndpoints(lineSegments):\n\u00a0 \u00a0 acc = []\n\u00a0 \u00a0 for i in range(len(lineSegments)):\n\u00a0 \u00a0 \u00a0 \u00a0 # x-coord, y-coord, left/right, segmentID\n\u00a0 \u00a0 \u00a0 \u00a0 acc.append((lineSegments[i][0][0], lineSegments[i][0][1], 0, i))\n\u00a0 \u00a0 \u00a0 \u00a0 acc.append((lineSegments[i][1][0], lineSegments[i][1][1], 1, i))\n\n\u00a0 \u00a0 n = len(acc)\n\u00a0 \u00a0 for i in range(n // 2 - 1, -1, -1):\n\u00a0 \u00a0 \u00a0 \u00a0 sift_down(acc, n, i)\n\n\u00a0 \u00a0 for i in range(n - 1, 0, -1):\n\u00a0 \u00a0 \u00a0 \u00a0 acc[0], acc[i] = acc[i], acc[0]\n\u00a0 \u00a0 \u00a0 \u00a0 sift_down(acc, i, 0)\n\u00a0 \u00a0 return acc\n\n\ndef lineSweep(lineSegments):\n\u00a0 \u00a0 T = AVLTree(segmentOrder)\n\u00a0 \u00a0 events = sortEndpoints(lineSegments)\n\u00a0 \u00a0 acc = []\n\u00a0 \u00a0 for p in events:\n\u00a0 \u00a0 \u00a0 \u00a0 segmentID = p[3]\n\u00a0 \u00a0 \u00a0 \u00a0 s = lineSegments[segmentID]\n\u00a0 \u00a0 \u00a0 \u00a0 up = above(T, s)\n\u00a0 \u00a0 \u00a0 \u00a0 down = below(T, s)\n\n\u00a0 \u00a0 \u00a0 \u00a0 if p[2] == 0:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 T.insert(s)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if up and intersection(up, s):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 acc.append([up, s])\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if down and intersection(down, s):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 acc.append([down, s])\n\u00a0 \u00a0 \u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if up and down and intersection(up, down):\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 acc.append([up, down])\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 T.delete(s)\n\u00a0 \u00a0 return acc\n</code></pre>"},{"location":"Algorithm/#18-bit-operation","title":"18. Bit operation","text":"<p>bit operations:</p> Python <pre><code>a = 4 ^ 5  # a: 1(4 XOR 5 bitwise)\na = a &gt;&gt; 1 # a: 0 (a // 2)\na = a &lt;&lt; 1 # a: 2 (a * 2)\na = 4 &amp; 5  # a: 4 (a AND 5 bitwise)\na = 4 | 5  # a: 5 (a OR 5 bitwise)\na = ~5     # a: -6 (reverse every bit of the number)\n</code></pre> <p>application: \u52a0\u51cf:</p>"},{"location":"Algorithm/#19-mergesort","title":"19. MergeSort","text":"<p>In-place template: <pre><code>def Merge(arr, l, m, r):\n    # create 2 temporary backup arrays\n    larr = arr[l:m + 1]\n    rarr = arr[m+1:r + 1]\n\n    lsize, rsize = len(larr), len(rarr)\n    pleft, pright = 0, 0\n    curr = l\n\n    while pleft &lt; lsize and pright &lt; risze:\n        if larr[pleft] &lt;= rarr[pright]:\n            arr[curr] = larr[pleft]\n            pleft += 1\n        else:\n            arr[curr] = rarr[pright]\n            pright += 1\n        curr += 1\n\n    while pleft &lt; lsize:\n        arr[curr] = larr[pleft]\n        pleft += 1\n        curr += 1\n\n    while pright &lt; rsize:\n        arr[curr] = rarr[pright]\n        pright += 1\n        curr += 1\n\n\n\n\ndef MergeSort(arr):\n    n = len(arr)\n\n    subArraySize = 1\n    while subArraySize &lt;= n - 1:\n\n        # Merge every pair of subarrays in arr\n        l = 0\n        while l &lt; n - 1:\n            mid = min(l + subArraySize - 1, n - 1)\n            r = min(l + 2 * subArraySize - 1, n - 1)\n\n            merge(arr, l, mid, r)\n            l += 2 * subArraySize\n        subArraySize *= 2\n</code></pre></p>"},{"location":"CheatSheet/","title":"CheatSheet","text":"<p>https://github.com/jsjtzyy/LeetCode/blob/master/Java%20cheat%20sheet%20for%20interview</p>"},{"location":"CheatSheet/#1-basic","title":"1. Basic","text":""},{"location":"CheatSheet/#11-declare-variable","title":"1.1 Declare variable","text":"PythonJavaCppJavascript <pre><code>x = 1\ny = 2.0\nz = \"abc\"\n\na = (1, 2, 3)\n</code></pre> <pre><code>class Main{\n    public static void main(String[] args){\n        int x = 7;\n        Integer x2 = 5; // we use Integer as function parameter type\n        float y = 1.0;\n        char z = 'a';\n\n        String msg = \"hello world\";\n\n        char[] c_arr = {'a', 'b'};\n\n        final int a = 1;  // final means `a` can only be assigned once\n    }\n}\n</code></pre> <pre><code>int main(void){\n    int x = 1;\n    double y = 2.0;\n    char z = 'a';\n}\n</code></pre> <pre><code>// common js\nvar x = 1\nvar y = 1.0   //x and y are both Number type\nvar s = \"abc\"\n\n// ES6\nlet x = 1 // let variable can be reassigned\nx = 2\nlet y = 1.0\nlet s = \"abc\"\n\nconst b = 1  // cannot be assigned again and must be initialized\n</code></pre>"},{"location":"CheatSheet/#12-print","title":"1.2 print","text":"PythonJavaCppjavascript <pre><code>print(\"hello world\")\n\na, b = 1, 2\nprint(f\"a = {a}, b = {b}\")\n\nclass A:\n    a = 1\n    def __str__(self):   # we customize class string in __str__ method\n        return f\"\\{a = {self.a}\\}\"\n\nprint(A())  \n</code></pre> <pre><code>import java.util.Arrays;\nclass Main{\n    public static void main(String[] args){\n        System.out.println(\"Hello world\");\n\n        int a = 1;\n        float b = 2.0;\n        char[] c_arr = {'a', 'b'};\n        System.out.printf(\"a = %d, b = %f, %s\", a, \\\n        b, Arrays.toString(c_arr));\n\n        // print class\n        class A {  \n            @Override  \n            public String toString(){  \n                return \"a\";  \n            }  \n        }     \n        System.out.println(new A());\n    }\n}\n</code></pre> <pre><code># include &lt;iostream&gt;\n#include &lt;stdio.h&gt;\nint main(void){\n    // 1. iostream\n    std::cout &lt;&lt;&lt; \"Hello world\";\n\n    // 2. stdio.h\n    int a = 1;\n    double b = 2.0;\n    char *msg = \"Hello world\";\n    printf(\"a=%d, b=%f, %s\\n\", a, b, msg);\n}\n</code></pre> <pre><code>a = 1;\nobj = {a: 1}\nconsole.log(`a: ${a}`);\nconsole.log(`obj: ${JSON.stringify(obj)}`)\n</code></pre>"},{"location":"CheatSheet/#13-loop","title":"1.3 Loop","text":"PythonJavaJavascript <pre><code>lst = [1, 3, 4, 4]\n\nfor item in lst:\n    print(item)\n\nflag = True:\nwhile flag:\n    # code below\n    print(lst)\n</code></pre> <pre><code>char[] c_arr = {'a', 'b'};\nfor(int i = 0; i &lt; c_arr.length; i++){\n    System.out.print(c_arr[i]);\n}\n\nfor(char item:c_arr){\n    System.out.println(item)\n}\n\nboolean flag = True;\nwhile(flag){\n    System.out.print(c_arr[i]);\n}\n</code></pre> <pre><code>// for loop 1:\nfor (let i = 0; i &lt; 3; i++) {  \n    console.log(\"Iteration number: \" + i);  \n}\n\n// for...in iterates over enumerable properties of an object\nconst person = { name: \"Alice\", age: 30 };  \nfor (const key in person) {  \n    console.log(key + \": \" + person[key]);  \n}\n\n// for...of iterates values of iterable objects\nconst colors = [\"red\", \"green\", \"blue\"];  \nfor (const color of colors) {  \n    console.log(color);  \n}\n\n// while loop\nlet count = 0;  \nwhile (count &lt; 3) {  \n    console.log(\"Count is: \" + count);  \n    count++;  \n}\n\n// do...while\nlet x = 0;  \ndo {  \n    console.log(\"Value of x: \" + x);  \n    x++;  \n} while (x &lt; 0);\n</code></pre>"},{"location":"CheatSheet/#14-define-function","title":"1.4 Define function","text":"PythonJavaJavascript <pre><code>def helloworld(x):\n    print(\"hello world: \", x)\n\nhello = lambda x: \"helloworld: \" + x\n</code></pre> <pre><code>class Demo {\n    public String fn(String args){\n        return args\n    }\n}\n\n// Runnable is a function that does not return anything\nRunnable fn = ()-&gt; {\n    System.out.println(\"helloworld\");\n}\n\n// Callable is a function that must return something\nCallable&lt;String&gt; fn = ()-&gt;{\n    return \"helloworld\"\n}\n</code></pre> <pre><code>// normal declare\nfunction helloworld(name){\n    console.log(`Hello: ${name}`);\n}\n\n// arrow function\nconst helloworld = (name) =&gt; {\n    console.log(`Hello: ${name}`);\n}\n</code></pre>"},{"location":"CheatSheet/#15-define-class","title":"1.5 define class","text":"JavaJavascript <pre><code>abstract class A1 {\n    public void methodA1;\n}\n\npublic interface A {\n    public void methodA;\n}\n\npublic class A2 extends A1 implements A {\n    // this class can be instantiated from anywhere\n    public A2(){}\n\n    // this class can only be instantiated by classes within same package\n    A2(){}\n\n    // this constructor can be accessed by class within same package or\n    // by subclasses in any packages\n    protected A2(){}\n\n    // this constructor can only be accessed within this class, like its\n    // static method\n    private A2(){}\n\n    public void methodA{}\n\n    public void methodA1{}\n}\n\nfinal class B {}\n</code></pre> <pre><code>class A {\n    constructor(a1, a2){\n        this.a1 = a1;\n        this.a2 = a2;\n    }\n}\n\nclass AA extends A{\n    constructor(a1, a2, a3){\n        super(a1, a2);\n        this.a3 = a3;\n    }\n}\n</code></pre>"},{"location":"CheatSheet/#16-if-statement","title":"1.6 if statement","text":""},{"location":"CheatSheet/#17-operator","title":"1.7 Operator","text":"<p>arithmetic:</p> Python <pre><code> a = 3 + 2\n a = 3 - 2\n a = 3 * 2\n a = 3 / 2\n a = 3 // 2\n a = 3 % 2\n</code></pre> <p>Comparison:</p> PythonJavascript <pre><code>a = {1: \"helloworld\"}\nb = {1: \"helloworld\"}\na == b\na is b\n</code></pre> <pre><code>// == performs type coersion before comparison\n0 == false           //return true\n1 == \"1\"             //return true\nnull == undefined    //return true\n\n// === does not perform type coersion before comparison\n0 === false          // return false (different types)\n1 === \"1\"            // return false\nnull === undefined   // false\n\n// Object.is: determine if two variables refer to the same object\na = {'a': 1}\nb = a\nObject.is(a, b)      // return true\n</code></pre> <p>logic: <pre><code>x = True\ny = False\n1 if x else 2\na and y\nx or y\n</code></pre></p> <p>bitwise:</p> Python <pre><code>a = 5\nprint(bin(x))  # print x's binary string\n10 &amp; 5         # 1010 AND 0101 = 0000\n10 | 5         # 1010 OR 0101 =  1111\n3 ^ 5          # 0011 XOR 0101 = 0110\n~a             # ~(0101) = 1010 = -6,  ~x = -(x + 1)\na &lt;&lt; 2         # (0101 &lt;&lt; 2) = 010100, (x &lt;&lt; a) = x * 2^a\na &gt;&gt; 2         # (0101 &gt;&gt; 2) = 01\n</code></pre> <p>misc:</p> Javascript <pre><code>// 1. ... is used to disassemble object or array\nlet x1 = {a1: 1, a2: true}\nlet x2 = {...x1, a3: false}  // x2: {a1: 1, a2: true, a3: false}\n\n// 2. usage of ...\nlet [a, ...rest] = [1, 2, 3, 4];\nconsole.log(rest)            // [2, 3, 4]\nlet rest2 = [...rest]        // rest2: [2, 3, 4]\n</code></pre>"},{"location":"CheatSheet/#2-collections","title":"2. Collections","text":""},{"location":"CheatSheet/#21-list","title":"2.1 List","text":"PythonJavaJavascript <pre><code>arr = [1, 2, 3]\narr[2]         # return 3\narr.append(4)  # arr becomes [1, 2, 3, 4]\narr.pop()      # arr becomes [1, 2, 3]\n\narr.insert(2, 5) # arr becomes [1, 2, 5, 3, 4] \n8 in arr         # return False\narr.index(5)     # return 2\nlen(arr)         # returns the arr's length: 5\n</code></pre> <pre><code>import java.util.ArrayList;  \nimport java.util.Arrays;  \nimport java.util.List;\n\n// ArrayList\nList&lt;Integer&gt; arr = new ArrayList&lt;&gt;();\nList&lt;Integer&gt; arr2 = new ArrayList&lt;&gt;(Arrays.asList(1, 2));\n\narr2.add(3);   // arr: [1, 2, 3]\narr2.add(2, 4)  // arr: [1, 2, 4, 5]\n\narr2.remove(1) // arr: [1, 4, 5]\narr2.remove(new Integer(1)) // arr: [4, 5]\n\narr2.contains(new Integer(4));\narr2.indexOf(new Integer(4));\n\narr2.get(0);      // gives 4\narr2.set(0, 2)    // arr: [2, 5]\n\n// Linkedlist: thread-unsafe\nList&lt;Integer&gt; arr3 = new LinkedList&lt;&gt;();\n\n// CopyOnWriteArrayList: thread-safe, for frequent reads\n// create copies when add, set, remove happen, so inefficient frequent write\n// does not block each thread while reading\n// Iterator can only read and each thread reads the version of the array  \n// before modification happens when looping\nList&lt;Integer&gt; arr4 = new CopyOnWriteArrayList&lt;&gt;(Arrays.asList(1, 2))\nIterator itr = list.iterator();\narr4.add(5);\n// this loop prints [1, 2] because itr is obtained before modified(add)\nwhile (itr.hasNext())\n    System.out.println(itr.next()); \n// this loop prints [1, 2, 5]\nIterator itr = list.iterator();\nwhile (itr.hasNext())\n    System.out.println(itr.next());\n</code></pre> <pre><code>let arr = [1, 2, 3]\narr[2]                 // return 3\narr.push(4)            // arr becomes [1,2,3, 4]\narr.pop(2)             // arr becomes [1, 2, 4]\narr.length             // returns 3\n\n4 in arr               // returns True\n// splice(start, deleteCount, item1, item2, ...)\n// splice deletes number of elements equal to deleteCount from arr[start]\n// inclusively, then add item1, item2, ... before the original arr[start]\n// position, then return an array containing deleted items\narr.splice(1, 1)             // arr becomes [1, 4]\narr.splice(1, 0, 3, 4, 5, 6) // arr becomes [1, 3, 4, 5, 6, 4]\narr.splice(1, 1, 5)         // arr becomes [1, 5, 4, 5, 6, 4]\n// find method\n// Map\n\n// Reduce\n\n// filter\n\n// forEach\n</code></pre>"},{"location":"CheatSheet/#22-set","title":"2.2 Set","text":"PythonJavaJavascript <pre><code>my_set = {\"apple\", \"banana\"} \nmy_set2 = {\"apple\", \"grape\"}\nmy_set.add(\"cherry\") # mySet: {\"apple\", \"banana\", \"cherry\"}\nmy_set.update([\"orange\", \"mango\", \"apple\"]) \n# mySet: {\"apple\", \"banana\", \"cherry\", \"orange\", \"mango\"}\nunion_set = my_set.union({\"pear\"})\n# union_set: {\"apple\", \"banana\", \"cherry\", \"orange\", \"mango\", \"pear\"}\nintersect_set = my_set.intersection(my_set2)\n# intersect_set: {\"apple\"}\ndiff_set = my_set2.difference(my_set)\n# diff_set: {\"grape\"}\n</code></pre> <pre><code>// hashset: not thread safe\nSet&lt;Integer&gt; a = new HashSet&lt;Integer&gt;();\nSet&lt;Integer&gt; b = new HashSet&lt;Integer&gt;(Arrays.asList(1, 2, 3))\nSet&lt;Integer&gt; c = new HashSet&lt;Integer&gt;(Arrays.asList(3, 4, 5))\n\na.add(10);                              // a: {10}\na.contains(10)                          // return true\na.remove(10)                            // a: {}\na.size()                                // 0\n// b becomes the intersection of b and c, b: {3}\nboolean result = b.retainAll(c)\n// b becomes the union of b and c, b: {3, 4, 5}\nresult = b.addAll(c)\n// b becomes b - c, b: {}\nresult = b.removeAll(c)\n\n// Treest: sorted set but not thread-safe\nSet&lt;Integer&gt; treeSet = new TreeSet&lt;&gt;(); //sort in ascending order by default\ntreeSet.lower(k);  // max element &lt; k, or null if non-exist\ntreeSet.higher(k); // min element &gt; k, or null if non-exist\ntreeSet.ceiling(k); // max element &lt;= k, or null if non-exist\ntreeSet.floor(k);   // min element &gt;= k, or null if non-exist\n\n// ConcurrentSkipListSet: sorted treeset, thread-safe &amp; lock-free\nSet&lt;Integer&gt; treeSet2 = new ConcurrentSkipListSet&lt;&gt;();\n\n// CopyOnWriteArraySet\nSet&lt;Integer&gt; s = new CopyOnWriteArraySet&lt;&gt;();\nIterator&lt;Integer&gt; t = s.iterator();\nwhile(t.hasNext()){\n    System.out.println(t.next());\n}\n</code></pre> <pre><code>let b = new Set()\nlet a = new Set([2])    \n\na.add(1)           // a becomes {1, 2}\n3 in a             // return False\na.delete(2)        // a becomes {1}\n\nb.add(3)\nb.add(1)\nconst unionSet = a.union(b)         //unionSet: {1, 3}\nconst intersect = a.intersection(b) //intersect: {1}\nconst diff = b.difference(a)        // diff: {3}\n</code></pre>"},{"location":"CheatSheet/#23-map","title":"2.3 Map","text":"JavaJavascript <pre><code>// 1. HashMap: not thread-safe\nMap&lt;Character, Integer&gt; map = new HashMap&lt;Character, Integer&gt;();\nmap.put('c', 1);       // map: {'c': 1}\nmap.put('b', 2)        // map: {'b': 2, 'c': 1}\nmap.get('c')           // return 1\nmap.getOrDefault('a', -1)  // return -1\nmap.remove('c')            // map: {'b': 2}\nmap.containsKey('c')       // false\nmap.keySet()               // {'b'}\nfor(Map.Entry&lt;Character, Integer&gt; entry : map.entrySet()){  \n // traverse key-value pair\n    entry.getKey();\n    entry.getValue();\n}\nmap.forEach((k,v) -&gt; System.out.println(\"key: \"+k+\" value:\"+v));\nmap.size()                // return 1\n\n// 2. Hashtable: locks entire table during any operations\nMap&lt;Character, Integer&gt; map = new Hashtable&lt;&gt;()\n\n// 3. ConcurrentHashMap: thread-safe without locking the entire table\nMap&lt;String, Integer&gt; concurrentMap = new ConcurrentHashMap&lt;&gt;();\n\n// 4. TreeMap:  sortedmap based on red-black tree\nMap&lt;Character, Integer&gt; treeMap1 = new TreeMap();\n// store the key in reverse order\nMap&lt;Character, Integer&gt; treeMap2 = new TreeMap(Collections.reverseOrder());\ntreeMap.lowerKey(k);           // return max key &lt; k\ntreeMap.higherKey(k);          // return min key &gt; k\ntreeMap.ceilingKey(k);            // return max key &lt;= k\ntreeMap.floorKey(k);           // return min key &gt;= k\n// return portion of treeMap with keys &lt; k\nSortedMap&lt;K,V&gt; portionOfTreeMap = treeMap.headMap(k); \n// return portion of treeMap with keys &gt; k\nSortedMap&lt;K,V&gt; portionOfTreeMap = treeMap.tailMap(k);\n\n// 5. ConcurrentSkipListMap: sorted tree map that is thread-safe &amp; lock-free\nMap&lt;Character, Integer&gt; treeMap3 = new ConcurrentSkipListMap();\n</code></pre> <pre><code>// Map:\nconst myMap = new Map()\nmyMap.has(\"a\")            // return False because key \"a\" does not exist\nmyMap.set(\"a\", 1)         // myMap becomes {\"a\": 1}\nmyMap.get(\"a\")            // return 1\nmyMap.delete(\"a\")         // myMap becomes\n</code></pre>"},{"location":"CheatSheet/#24-string","title":"2.4 String","text":"PythonJavaJavascript <pre><code># immutale string\ns = \"abc\"\n</code></pre> <pre><code>// String class: immutable strings\nString s = \"abcab\";\n\ns.charAt(1);          // gives 'b'\ns.compareTo(\"bcd\");   // return -1 because \"a\" &lt; \"b\" and differ by 1\ns.compareTo(\"cd\");    // return -2 because \"a\" &lt; \"c\" and differ by 2\ns.contains(\"bc\");     // return True\ns.substring(0, 2) ;   // return \"ab\"\ns.substring(1);       // return \"bca\"\ns.indexOf(\"ab\");      // 0, return the location of first substring \"ab\" in s\ns.indexOf(\"ab\", 2);   // 3, return the location of \"ab\" after s[2] inclusive\n// Return \"ttctt\", replace all occurrences of \"ab\" with \"tt\"\ns.replace(\"ab\", \"tt\");  \n// Return char array: {'a', 'b', 'c', 'a', 'b'}\nchar[] arr = s.toCharArray();       \n// Return \"a*b*c\", join the list of &lt;String&gt; into one string connected by\n// delimiter\nString.join(\"*\", new ArrayList&lt;&gt;(Arrays.asList(\"a\", \"b\", \"c\")));\n// Return True iff a string character is alnum\nCharacter.isLetterOrDigit(str.charAt(0))\n\n\n// StringBuffer class: mutable &amp; thread-safe\nStringBuffer sb = new StringBuffer();\nsb = new StringBuffer(\"abced\");\nsb.append(\"ab\");       // sb becomes \"abcedab\"\nsb.insert(0, \"zx\");    // sb becomes \"zxabceddab\"\nsb.deleteCharAt(0);    // sb becomes \"xabceddab\"\nsb.setCharAt(0, 'c')   // sb becomes \"cabceddab\"\nsb.reverse()           // sb becomes its reverse\n\n// StringBuilder class: mutable, fast but thread-unsafe\n// has same methods and use as StringBuffer\n\n// CharSequence interface: implemented by String, StringBuffer, StringBuilder; seen in the parameter type of replace and some methods\n</code></pre> <pre><code>s = \"abc\"\n\ns.slice(0,2)        // returns[0:2] which is \"ab\"\ns.indexOf(\"bc\", 0)  // return 1\ns.includes(\"ab\", 0) // return True\ns + \"bcd\"           // return \"abcbcd\"\n</code></pre>"},{"location":"CheatSheet/#25-multi-set","title":"2.5 Multi-set","text":""},{"location":"CheatSheet/#3-files-io","title":"3. Files, I/O","text":""},{"location":"CheatSheet/#31-read-write-api","title":"3.1 Read &amp; Write API","text":"<p>These APIs are commonly used to read from local persistence:</p> JavaJavascript <pre><code>// IO package: blocks in socket I/O and file I/O\n// Read:\n// 1. read text file character by character\nString filePath = \"hello.txt\"\nBufferedReader reader = new BufferedReader(new FileReader(filePath));\nreader.readline()     // returns either a string or null\n// 2. read binary file bytes by bytes\nFileInputStream fis = new FileInputStream(\"data.bin\");\nBufferedInputStream bis = new BufferedInputStream(fis); // improve perform\nDataInputStream dis = new DataInputStream(bis); // can read types\nint intValue = dis.readInt();  \ndouble doubleValue = dis.readDouble();  \nString stringValue = dis.readUTF();\n// 3. read entire contents of a file\n// readAllLines from NIO is a wrapper of BufferReader from IO package\n// and do not block, this is not the core of nio package\nPath path = Paths.get(\"myFile.txt\");\nbyte[] bytes = \"Some contents\".getBytes()\nList&lt;String&gt; lines = Files.readAllLines(path);\n// write:\n// 1. write text file \nBufferedWriter writer = new BufferedWriter(new FileWriter(filePath));\nString content = \"Hello, Java File I/O!\\nThis is a new line.\";\nwriter.write(content);\n// 2. write binary file\nFileOutputStream fos = new FileOutputStream(\"data.bin\");\nDataOutputStream dos = new DataOutputStream(fos);\ndos.writeInt(12345);\ndos.writeDouble(3.14159);\n// 3. write bytes using a method from nio package\n// truncate existing contents and append to existing content\nPath path = Paths.get(\"myFile.txt\");\nbyte[] bytes = \"Some contents\".getBytes()\nFiles.write(path, bytes, StandardOpenOption.CREATE, \\\n                         StandardOpenOption.TRUNCATE_EXISTING);\nFiles.write(filePath, bytes, StandardOpenOption.APPEND);\n\n// NIO: does not block in socket I/O but blocks in file I/O\n// FileChannel: operate on byte level and can read/write contents into \n//              buffer, supporting direct memory access and reduce copying\nFileChannel readChannel = FileChannel.open(\"myFile.txt\", \\\n                        StandardOpenOption.READ);\nFileChannel writeChannel = FileChannel.open(\"myFile.txt\", StandardOpenOption.CREATE, StandardOpenOption.WRITE);\nByteBuffer buffer = ByteBuffer.allocate(1024);\nint bytesRead = readChannel.read(buffer);\nwriteChannel.write(buffer);\n\n// AIO: does not block in socket I/O or file I/O\n// using AIO typically means using java.nio.channels.AsynchronousFileChannel\nPath filePath = Paths.get(\"myFile.txt\");\nAsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(\\\n filePath, StandardOpenOption.READ, StandardOpenOption.WRITE);\nByteBuffer buffer = ByteBuffer.allocate(1024);  \nFuture&lt;Integer&gt; readResult = fileChannel.read(buffer, 0, buffer, new CompletionHandler&lt;Integer, ByteBuffer&gt;() {  \n    @Override  \n    public void completed(Integer bytesRead, ByteBuffer attachment) {  \n    // Handle successful read  \n    attachment.flip(); // Prepare for reading from the buffer  \n    // ... process data ...  \n    }  \n\n    @Override  \n    public void failed(Throwable exc, ByteBuffer attachment) {  \n    // Handle error  \n    }  \n});\n\ntry {\n    // get() blocks until read completes\n    Integer bytesRead = readResult.get();  \n    buffer.flip();  \n    // ... process data ...  \n} catch (InterruptedException | ExecutionException e) {  \n    // Handle error  \n}\n</code></pre> <pre><code>// ES syntax\n// asynchronous read &amp; write\nimport { readFile, writeFile } from 'node:fs/promises';  \n\nasync function asyncFileExample() {  \n    try {  \n        const data = await readFile('./myFile.txt', { encoding: 'utf8' });  \n        console.log('File content:', data); \n\n        const content = 'This is some content to write to the file.'; \n        await writeFile('./myNewFile.txt', content, { encoding: 'utf8' });\n        console.log('File written successfully!');\n    } catch (error) {  \n        console.error('Error:', error);  \n    }  \n}\n\n// synchronous read &amp; write\nimport { readFileSync, writeFileSync } from 'node:fs';\ntry{\n    const content = fs.readFileSync('myFile.txt', 'utf-8');  \n    console.log(content);\n\n    await fs.writeFile(filePath, data);  \n    console.log('File written successfully!');\n} catch(err) {\n    console.error(err)\n}\n\n// readStream, writeStream\n// Similar to read/write file line by line instead of their entire contents\n// into memory and is memory-eficient\nimport { createReadStream, createWriteStream}\nconst readstream = createReadStream('large_file.txt', 'utf8');\nreadstream.on(\"data\", chunk =&gt; {\n    // fn is a some kind of function that process each chunk\n    // for example, console.log\n    fn(chunk)\n})\nconst writeStream = createWriteStream('output.txt');\nwriteStream.write('This is the first line of text.\\n');  \nwriteStream.write('This is the second line.\\n');\n\nreadstream.pipe(writeStream)\n\nwriteStream.end('This is the final line.');\n</code></pre>"},{"location":"CheatSheet/#32-network-stream","title":"3.2 Network Stream","text":"<p>Stream is commonly used to read something from network, while the above section is commonly used to read sth from local persistence</p> JavaJavascript <pre><code>URL url = new URL(\"http://www.example.com/somefile.txt\");\n// different from above FileInputStream\nInputStream inputStream = url.openStream();\nBufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\nreader.readline();  // return string or null\n</code></pre> <pre><code>// ReadableStream: different from readStream above\n\n//customized ReadableStream\nconst myReadableStream = new ReadableStream({\n    // This function is called when the stream is first created  \n    // Enqueue data chunks to be read\n    start(controller) {  \n        controller.enqueue('Hello, ');  \n        controller.enqueue('world!');  \n        // Close the stream when all data has been enqueued  \n        controller.close();  \n    },   \n});\n\n// common way of obtaining readableStream\nconst myReadableStream2 = (await fetch(\"www.example.com\")).body\n\n// how to use readable Stream:\nasync function readStream(myReadableStream) {\n    const reader = myReadableStream.getReader();\n    let result;  \n    let accumulatedData = '';  \n\n    while (!result || !result.done) {  \n        result = await reader.read();  \n        if (!result.done) {  \n            accumulatedData += result.value;  \n        }  \n    }\n}\n\n// create WritableStream to send content to a destination\nconst writableStream = new WritableStream({  \n    write(chunk, controller) {  \n    // we use the error function from the controller\n        try {  \n            // Simulate an operation that might fail  \n            if (Math.random() &lt; 0.1) {  \n                throw new Error('Simulated write error!');  \n            }  \n            console.log('Successfully wrote:',chunk.toString());\n        } \n        catch (err) {  \n            console.error('Error during write:',err.message); \n            // Signal the error to the stream \n            controller.error(err);   \n        }  \n    },  \n});  \n\nasync function writeData() { \n    const writer = writableStream.getWriter();   \n    for (let i = 0; i &lt; 5; i++) {  \n        try {  \n            await writer.write(`Data chunk ${i}`);  \n        } catch (err) {  \n            console.log('Stream encountered an error');  \n            break;  \n        }  \n    }  \n    writer.close();  \n}\n</code></pre>"},{"location":"CheatSheet/#33-socket","title":"3.3 Socket","text":"<p>Server:</p> Java <pre><code>// NIO socket I/O:\n// SelectableChannel(not FileChannel) subclasses in NIO packages are non-\n// blocking and can be multiplexed by Selector class(epoll-based server).\n// SelectableChannel subclasses: SocketChannel, ServerSocketChannel, \n// DatagramChannel, Pipe.SourceChannel, Pipe.SinkChannel\n// Selectors class\n// Buffers class\nSelector selector = Selector.open();\nServerSocketChannel server = ServerSocketChannel.open();\nserver.configureBlocking(false);\nserver.bind(new InetSocketAddress(8080));\nserver.register(selector, SelectionKey.OP_ACCEPT);\n\nwhile (true) {\n    selector.select(); // uses epoll internally on Linux\n    for (SelectionKey key : selector.selectedKeys()) {\n        if (key.isAcceptable()) {\n            SocketChannel client = server.accept();\n            client.configureBlocking(false);\n            client.register(selector, SelectionKey.OP_READ);\n        } else if (key.isReadable()) {\n            SocketChannel client = (SocketChannel) key.channel();\n            ByteBuffer buffer = ByteBuffer.allocate(1024);\n            client.read(buffer);\n        }\n    }\n    selector.selectedKeys().clear();\n}\n\n// AIO socket I/O:\nAsynchronousServerSocketChannel server = \\\nAsynchronousServerSocketChannel.open().bind(new \\\nInetSocketAddress(\"localhost\", 5000));\n\nSystem.out.println(\"Server listening on port 5000...\");\n\n// Start accepting clients asynchronously\nserver.accept(null, new CompletionHandler&lt;AsynchronousSocketChannel, Void&gt;() {\n    @Override\n    public void completed(AsynchronousSocketChannel client, Void att) {\n        // Accept next connection (important!)\n        server.accept(null, this);\n\n        System.out.println(\"New connection: \" + client);\n\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        client.read(buffer, buffer, new CompletionHandler&lt;Integer, ByteBuffer&gt;() {\n            @Override\n            public void completed(Integer bytesRead, ByteBuffer buf) {\n                buf.flip();\n                String msg = StandardCharsets.UTF_8.decode(buf).toString();\n                System.out.println(\"Received: \" + msg);\n\n                // Echo message back\n                ByteBuffer response = ByteBuffer.wrap((\"Echo: \" + msg).getBytes(StandardCharsets.UTF_8));\n                client.write(response, null, new CompletionHandler&lt;Integer, Void&gt;() {\n                    @Override\n                    public void completed(Integer result, Void att) {\n                        try { client.close(); } catch (Exception ignore) {}\n                    }\n\n                    @Override\n                    public void failed(Throwable exc, Void att) {\n                        exc.printStackTrace();\n                    }\n                });\n            }\n\n            @Override\n            public void failed(Throwable exc, ByteBuffer buf) {\n                exc.printStackTrace();\n            }\n        });\n    }\n\n    @Override\n    public void failed(Throwable exc, Void att) {\n        exc.printStackTrace();\n    }\n});\n\n// Keep server alive\nThread.currentThread().join();\n</code></pre>"},{"location":"CheatSheet/#4-set-up","title":"4. Set up","text":""},{"location":"CheatSheet/#41-package-manager","title":"4.1 Package Manager","text":"<pre><code>---tab Python\nNative:\n\n- file folder directories:\n&gt; src\n&gt; &gt; main.py\n&gt; \n&gt; requirements.txt\n---tab Javascript\nhello\n</code></pre>"},{"location":"CheatSheet/#42-how-to-debug","title":"4.2 How to debug","text":""},{"location":"CheatSheet/#43-module-import","title":"4.3 Module import","text":""},{"location":"CheatSheet/#5-concurrency","title":"5. Concurrency","text":""},{"location":"CheatSheet/#51-atomic-class","title":"5.1 Atomic class","text":""},{"location":"CheatSheet/#52-thread-thread-pool","title":"5.2 Thread &amp; Thread pool","text":"Java <pre><code>// 1. Thread-api: use this when want to cutomize behaviour of each thread\n//                the signal handler, wait object, or each thread needs to\n//                wait each other\npublic class MyThread extends Thread {\n    @Override\n    public void run(){\n        Thread.sleep(2000); // make curr thread sleep 2 seconds\n        System.out.println(\"curr tid: \" + Thread.currentThread().getId());\n    }\n}\n// start new thread\nMyThread thread = new MyThread();\nthread.start();\n\n// main thread wait for thread to be exited\ntry{\n    thread.join();\n} catch(InterruptedException e){\n    Thread.currentThread().interrupt();\n}\n\n// 2. Executor Service(Preferred): handy way to create and destroy thread\n// 2.1 Common ExecutorService\n// create exactly one thread for each submitted task and kill it once finish\nExecutorService executor = Executors.newSingleThreadExecutor();\n// create a pool of 4 threads and each thread can be reused for new tasks\nExecutorService executor = Executors.newFixedThreadPool(4);\n// create a pool of infinite threads and each idle thread can be \n// reused(idle: thread terminated after 60s if unused)\nExecutorService executor = Executors.newCachedThreadPool();\n\nCallable&lt;String&gt; task1 = ()-&gt; { return \"task1\"; }\nCallable&lt;String&gt; task2 = () -&gt; { return \"task2\"; }\nList&lt;Callable&lt;String&gt;&gt; tasks = new ArrayList(Arrays.asList(task1, task2));\n\n// submit the task to be executed and return a Future object\nFuture&lt;Void&gt; result1 = executor.submit(task1);\n// blocks the curr thread, execute a list of Callables&lt;T&gt; that returns the\n// same type; once all tasks are completed, return list of Future&lt;T&gt;\nList&lt;Future&lt;String&gt;&gt; results = pool.invokeAll(taskList);\n\n// 2.2 ScheduledExecutorService\n// a pool with fixed threads and threads execute after delay or periodically\nScheduledExecutorService executor = Executors.newScheduledThreadPool(2);\n\n// 2.3 graceful 2-phase shut down:\n// tell the executor not to accept new task but the threads may continue to\n// execute submitted tasks\nexecutor.shutdown();\ntry {  \n    if (!executorService.awaitTermination(timeout, unit)) {  \n    // Handle the case where termination did not occur within the timeout  \n        System.err.println(\"ExecutorService did not terminate within the specified timeout.\");  \n    // Optionally, force shutdown if termination is critical  \n        executorService.shutdownNow();  \n    }  \n} catch (InterruptedException e) {  \n    // Handle interruption  \n    Thread.currentThread().interrupt(); // Re-interrupt the current thread  \n    executorService.shutdownNow(); // Force shutdown if interrupted  \n}\n</code></pre>"},{"location":"CheatSheet/#53-lock","title":"5.3 Lock","text":"Java <pre><code>// wrap non-concurrent collections\nList&lt;Integer&gt; list = Collections.synchronizedList( new ArrayList&lt;&gt;(Arrays.asList(4,3,52)));\n</code></pre>"},{"location":"CheatSheet/#54-synchronizer-class","title":"5.4 Synchronizer class","text":"<p>CountDownLatch: makes a thread wait for a number of threads, either child or parent; can only be used once</p> Java <pre><code>// 1. wait for a set of threads instead of one thread; \nint threadCount = 5;\nCountDownLatch latch = new CountDownLatch(threadCount);\nclass Worker extends Thread {\n    private final CountDownLatch latch;\n    Worker(CountDownLatch latch){\n        this.latch = latch;\n    }\n\n    @Override\n    public void run(){\n        Thread.sleep(2000);\n        latch.countDown();\n    }\n};\nfor(int i = 0; i &lt; threadCount; i++){\n    new Worker(latch).start();\n};\n// use latch to block the current thread and wait for all threads that \n// possess the latch and block\nlatch.await();\n\n// 2. child thread wait for parent thread, where join() mtd can't do\nint threadCount = 10;\nCountDownLatch startGate = new CountDownLatch(1);\nfor(int i = 0;i &lt; threadCount; i++){\n    new Thread(()-&gt;{\n        try {\n            startGate.await();\n            // Similate the duration of any task\n            Thread.sleep(100);      \n        }catch (InterruptedException ignored) {\n\u00a0 \u00a0 \u00a0 \u00a0 }finally {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 endGate.countDown();\n\u00a0 \u00a0 \u00a0 \u00a0 }\n    }).start();\n}\nstartGate.countDown();\n</code></pre> <p>CyclicBarrier: make a set of threads to stop at a certain moment and then start at the same time</p> Java <pre><code>int threadCount = 4;\nExecutorService pool = Executors.newFixedThreadPool(threadCount);\nCyclicBarrier barrier = new CyclicBarrier(threadCount);\n\nfor(int i = 0; i &lt; threadCount - 1; i++){\n    pool.submit(()=&gt;{\n        try {\n            // block the thread until threadCount threads call await\n            barrier.await();\n            fn()\n        } catch(InterruptedException | BrokenBarrierException e){\n            e.printStackTrace();\n        }\n    })\n}\n\ntry{\n    barrier.await();\n} catch (InterruptedException | BrokenBarrierException e) {\n    e.printStackTrace();\n}\nbarrier.reset();\npool.shutdown();\n</code></pre> <p>Phaser:</p> <p>Semaphore:</p>"},{"location":"CheatSheet/#55-pipes","title":"5.5 Pipes","text":"<p>These classes can be used as pipes between threads or processes <pre><code>---tab Java\nConcurrentLinkedQueue:\n\n- add: insert element at tail, throws exception when fail\n- offer: insert element at tail, return False when fail\n- peek: retrieve but do not remove the head of the queue; return null when empty\n- poll: retrieve and remove the head of the queue\n\nBlockingQueue:\n\n- put: insert element at tail, block the thread until queue is available(add/offer does not block)\n- take: Retrieves and removes the head of this queue, waiting if necessary until an element becomes available\n\nConcurrentLinkedQueue vs BlockingLinkedQueue(2 distinctions):\n1. ConcurrentLinkedQueue spins and retries modification when multiple concurrent modifications happen. It does not switch thread, thus, does not block. On the other hand, BlockingLinkedQueue waits to grab the ReentrantLock inside the blockingqueue and switches thread when concurrent modifications happen. Thus, this blocks the thread when concurrent modifications happen\n2. BlockingLinkedQueue has 2 extra methods: put and take. These 2 methods additionally block thread when queue is full or empty\n</code></pre> APIs:</p> Java <pre><code>// ConcurrentLinkedQueue: thread-safe and lock-free, non blocking\nQueue&lt;Integer&gt; q = new ConcurrentLinkedQueue&lt;&gt;();\nq.add(10);     // q: [10]\nq.offer(20);   // q: [10, 20]\nq.peek();      // return 10\nq.poll();      // return 10, q:[20]\n\n// ConcurrentLinkedDeque: \nQueue&lt;Integer&gt; q2 = new ConcurrentLinkedDeque&lt;&gt;();\nq2.addFirst(10);   // q2: [10]\nq2.addLast(20);    // q2: [10, 20]\nq2.offerFirst(30); // q2: [30, 10, 20]\nq2.offerLast(40);  // q2: [30, 10, 20, 40]\nq2.peekFirst();    // 30, q2: [30, 10, 20, 40]\nq2.peekLast();     // 40, q2: [30, 10, 20, 40]\nq2.pollFirst();    // 30, q2: [10, 20,40]\nq2.pollLast();     // 40, q2: [10, 20]\n\n// LinkedBlockingQueue: thread-safe but uses lock, may block(park)\nBlockingQueue&lt;Integer&gt; bq = new LinkedBlockingQueue&lt;&gt;();\nBlockingQueue&lt;Integer&gt; bq = new LinkedBlockingQueue&lt;&gt;(4); // with capacity:4\nbq.put(5);     // bq: [5]\nbq.take();     // return 5, bq: []\n\n// LinkedBlockingDeque:\nBlockingDeque&lt;Integer&gt; bq2 = new LinkedBlockingDeque&lt;&gt;();\nbq2.putFirst(5);   // bq2: [5]\nbq2.putLast(6);    // bq2: [5, 6]\nbq2.takeFirst();   // return 5, bq2: [6]\nbq2.takeLast();    // return 6, bq2: []\n</code></pre> <p>useCases:</p>"},{"location":"CheatSheet/#6-feature","title":"6. Feature","text":""},{"location":"CheatSheet/#61-reference","title":"6.1 Reference","text":""},{"location":"CheatSheet/#62-reflection","title":"6.2 Reflection","text":"JavaJavascript <pre><code>// core classes related to reflection:\n// Class, Field, Method, Constructor\n// We reveal following examples:\n// 1. Getting a class object 2. Inspecting class members\n// 3. invoke methods and access fields dynamically\n\n// 1. get class:\n// get class given the class name\nClass&lt;?&gt; myClass1 = Class.forName(\"Java.lang.String\");\n// get class from an instance\nString myString = \"Hello world\";\nClass&lt;?&gt; myClass2 = myString.getClass();\n// get class from the object class\nClass&lt;?&gt; myClass3 = Integer.class;\nSystem.out.println(\"class Name \" + myClass.getName());\n\n// 2. get Methods and fields\nMethod[] methods = myClass2.getDeclaredMethods();\nField[] fields = myClass2.getDeclaredFields();\nfor (Method mtd: methods) {\n    System.out.println(\"Method: \" + method.getName());\n    System.out.println(\"Field: \" + field.getName());\n}\n\n// 3\n// invoke method\nmethods.get(0).invoke(myString, arg1)\n// get and set a field\nField fieldA = fields.get(0);\nfieldA.setAccessible(true);\nString name = (String) fieldA.get(obj);\nSystem.out.println(\"Name: \" + name);  \nnameField.set(person, \"Jane Doe\")\n</code></pre> <pre><code>// 1. Object: internal implementation of Object is hashtable \n//         whose key type can only be string or Symbol type\nlet obj = {k1: 1, k2: {x: 1}}\n// obj: {k1: 1, k2: {x: 1}, k3: \"ab\"}\nObject.defineProperty(obj, \"k3\", {\n    value: \"ab\",\n    writable: true,       // this property can be changed through `=`\n    configurable: true,\n    enumerable: false\n})\n// return all keys of an object regardless of enumerable\n// [\"k1\", \"k2\", \"k3\"]\nObject.getOwnPropertyNames(obj)\n// return all enumerable keys of an object, [\"k1\", \"k2\"]\nObject.keys(obj)\n// return the descripor values of a key, \n// {value: 1, writable: true, configurable: true, enumerable: true}\nObject.getOwnPropertyDescriptor(obj, \"k1\")\n// Object.assign copies all enumerable properties of a source object \n// to target\nobj2 = {}\nObject.assign(obj2, obj) // obj2: {k1: 1, k2: {x: 1}, k3: \"ab\"}\n// seal, freeze, extend\nObject.preventExtensions(obj) // obj can no longer add new properties\nObject.isExtensible(obj)      // return False\nObject.seal(obj)              // obj cannot add or delete properties\nObject.isSealed(obj)          // return true\nObject.freeze(obj)            // obj cannot add, delete or modify properties\nObject.isFrozen(obj)          // return True\n\n// 2. Function:\nfunction greet(greeting, punc){\n    return greeting + this.name + punc;\n}\n// call: replace `this` with a specified object and invoke the method\n// apply: replace `this` with a specified object and invoke the method with \n//        an array of args (Note: cannot work on arrow function)    \ngreet.call({name: \"Tom\"}, \"hello \", \"!\")  \ngreet.apply({name: \"Tom\"}, [\"hello \", \"!\"]) // return \"hello Tom!\"\n// bind: return a new func whose this is permanently set to specified\nconst greet2 = greet.bind({name: \"Tom\"})\ngreet2(\"hello \", \"!\")   // return \"hello Tom!\"\n</code></pre>"},{"location":"CheatSheet/#63-closure","title":"6.3 Closure","text":"<p>In programming language like javascript, Java, Python, C, it uses lexical scope(static scope) meaning that the scope of a variable is determined by where it's defined in the code, not where it's called. On the other hand, dynamic scope means the scope of a variable is determined by where it's called.</p> <p>How does lexical scope work: Lexical scope is implemented by\u00a0creating a scope chain that links a function to its parent scopes based on the physical structure of the code, allowing a variable lookup to begin in the innermost scope and repeat moving outward until a match is found.\u00a0When a function is defined, a closure is created that holds a reference to its parent scope, establishing this chain.</p> <p>Use Cases:  - allow functions to maintain state between calls - create private variables that are only accessible by inner functions</p> Javascript <pre><code>function createCounter() {  \n    let count = 0; // 'count' is in the outer scope  \n    // 'increment' is the inner function, forming a closure\n    function increment() {   \n        count++;  \n        console.log(count);  \n    }  \n    return increment; // Return the inner function  \n}  \n\nconst counter1 = createCounter(); \ncounter1(); // print 1   \ncounter1(); // print 2\n</code></pre>"},{"location":"CheatSheet/#64-sync-vs-async","title":"6.4 Sync vs Async","text":"<p>Promise API: Promise in javascript is used to wrap the calling of function that takes a lot of time to execute and return a result; the code inside promise is executed synchrounously, but the code in then or catch method is executed after all jobs in event queue are executed; Thus, inside promise we usually place a task at the end of the event queue and the then method will get the result of that task and process the result </p> JavaJavascript <pre><code>// 1. create CompletableFuture object\n// 1.1 runAsync takes a function that does not return value\nCompleteableFuture&lt;Void&gt; future1 = CompleteableFuture.runAsync(()-&gt;{\n    // the function inside Future object is run in a separate thread\n    System.out.println(\"hello world\");\n})\n// 1.2 supplyAsync takes a function that can return value\nfinal int x = 1;\nfinal int y = 2;\nCompleteableFuture&lt;Integer&gt; future2 = CompleteableFuture.supplyAsync(()-&gt;{\n    // the variables from the parent scope must be final\n    return x + y;\n})\n\n// 1.3 result from ExecutorService\nExecutorService executor = Executors.newFixedThreadPool(1);\nCallable&lt;String&gt; = () -&gt; {\n    return Files.readAllLines(Paths.get(\"myFile.txt\")).get(0);\n}\nFuture&lt;String&gt; future = executor.submit(task);\n\n// 2. then &amp; exceptionally callback\n// 2.1 exceptionally &amp; thenRun:\n// thenRun cannot get result from last Future object and return \n// CompleteableFuture&lt;Void&gt;\nfuture2.exceptionally(ex -&gt; return ex.getMessage())\\\\\n    .thenRun(());\n\n// 2.2 thenAccept: get result from last Future object and return \n// CompleteableFuture&lt;Void&gt;\nfuture2.thenAccept(s -&gt; System.out.println(\"result: \" + s))\n\n// 2.3 thenApply: get result from last Future object and return sth in \n// its returned Future object \nFuture&lt;Integer&gt; future3 = future2.thenApply(s -&gt; return (1 + s));\n\n// 2.4 whenComplete: takes a function that returns void as input and return Future object that has wrapped value from last Future object\nFuture&lt;Integer&gt; future3 = future2.whenComplete((result, ex) -&gt; {\n    if(ex != null){\n        System.err.println(\"Error: \" + ex.getMessage());\n    } else{\n        System.out.println(result)\n    }\n})\n</code></pre> <pre><code>// 1. create customized promise\nlet x = getRandomInt(0, 1)\nlet myPromise = new Promise((resolve, reject) =&gt; {\n    // the function inside is executed synchronously\n    if(x == 0)\n        // resolve just passes \"hello world\" to parameter of \n        // value in then method\n        // You can also pass another promise object into resolve\n        resolve(\"hello world\") \n    else\n        reject(\"destroy world\")\n}).then(value =&gt; {\n    // the function inside then is executed asynchrounously\n    console.log(value)\n}).catch(err =&gt; {\n    // the function inside catch is executed asynchrounously\n    console.error(err)\n})\n\n// 2. Promise.all\nconst promise1 = fetch('https://api.example.com/data')\nconst promise2 = readFile('./myFile.txt', { encoding: 'utf8' })\nPromise.all([promise1, promise2])\n    .then((results) =&gt; console.log(results))\n    .catch((err) =&gt; console.error(err))\n</code></pre> <p>Common Asynchronous operations that can be wrapped in Promise:</p> Javascript <pre><code>// 1. setTimeout, setInterval\nnew Promise((resolve) =&gt; {\n    setTimeout(()=&gt;{\n        resolve(1)\n    }, 0)\n}).then((value) =&gt; console.log(value))\n\n// return result of asynchronous function that returns promise\nnew Promise((resolve) =&gt;{\n    resolve(readFile('./myFile.txt', { encoding: 'utf8' }))\n}).then((value) =&gt; console.log(value))\n// above is equivalent to:\n//readFile('./myFile.txt', { encoding: 'utf8' })\n//.then((value) =&gt; console.log(value))\n</code></pre> <p>async/await syntax:  - async wraps the function inside a promise object and pass the return value of that function into resolve in promise - await must be used within an asyn function. It is placed before an expression that returns a promise object and is used to capture the resolved value of promise. When js executes the await line, it will executes the code inside the promise object after <code>await</code>, then it will jump outside to the parent stack to execute the rest of the code. After the promise object after await is resolved, it will continue to execute the lines after the await line in that async function</p> JavaJavascript <pre><code>// get() on Future object:\n// get() acts as await in javascript\nExecutorService executor = Executors.newFixedThreadPool(1);\nCallable&lt;String&gt; = () -&gt; {\n    return Files.readAllLines(Paths.get(\"myFile.txt\")).get(0);\n}\nFuture&lt;String&gt; future = executor.submit(task);\n// blocks the thread until future is resolved\nString result = future.get();\n</code></pre> <pre><code>async function f(){\n    const data = await readFile('./myFile.txt', \n    { encoding: 'utf8' })\n    console.log(data)\n}\n\n// helloworld is printed first, then the content of myFile.txt\nf()\nconsole.log(\"helloworld);\n</code></pre> <p>asyn/await mannual implementation: https://blog.csdn.net/weixin_50789156/article/details/124199482</p>"},{"location":"CheatSheet/#65-memory-model","title":"6.5 Memory Model","text":"<pre><code>---tab Javascript\nhttps://blog.csdn.net/sjhcake/article/details/123856054\n</code></pre>"},{"location":"CheatSheet/#66-generic","title":"6.6 Generic","text":"Java <pre><code>&lt;? super E&gt;\nCollection&lt;? extends E&gt; c\n</code></pre>"},{"location":"CheatSheet/#67-iterator-seq-generator","title":"6.7 Iterator &amp; Seq Generator","text":"PythonJavaJavascript <pre><code># yield, generator function\n</code></pre> <pre><code>// Iterator\n\n// Stream Interface and IOStream\n</code></pre> <pre><code>// Generator function &amp; yield\n</code></pre>"},{"location":"CheatSheet/#68-signal-handler","title":"6.8 Signal handler","text":""},{"location":"typescrpt/","title":"Typescrpt","text":"<p>resource</p>"},{"location":"typescrpt/#_1","title":"\u4e00. \u57fa\u672c","text":""},{"location":"typescrpt/#1-tsjs","title":"1. TS\u4e0eJS\u7684\u533a\u522b\u4e0e\u8054\u7cfb:","text":"<p>ts\u589e\u52a0\u4e86:</p> <ul> <li>\u7c7b\u578b</li> <li>ES\u65b0\u7279\u6027\u548cES\u4e0d\u5177\u5907\u7684\u7279\u6027</li> </ul> <p>\u8054\u7cfb:</p> <ul> <li>\u6240\u6709js\u4ee3\u7801\u53ef\u88abts\u89e3\u6790, ts\u662fjs\u7684\u8d85\u96c6</li> </ul>"},{"location":"typescrpt/#2","title":"2. \u5f00\u53d1\u73af\u5883\u642d\u5efa","text":"<ol> <li>\u4f7f\u7528npm\u5b89\u88c5Typescript: \u4e00\u4e0b\u4f9d\u8d56:</li> <li><code>npm i -g typescript ts-loader</code>(\u7528\u4e8e\u5c06typescript\u7f16\u8bd1\u6210js)</li> <li><code>npm i -g ts-node</code>\u53ef\u4ee5\u8df3\u8fc7\u7f16\u8bd1\u9636\u6bb5\u76f4\u63a5\u6267\u884cts\u4ee3\u7801(\u53ef\u72ec\u7acb\u4e0e\u4e0a\u9762\u7684\u4f9d\u8d56, \u5373\u4e0d\u88c5\u4e0a\u9762\u4ee5\u6765\u53ea\u88c5ts-node)</li> <li>(*\u53ef\u80fd)\u82e5\u5728powershell\u91cc\u4f7f\u7528<code>tsc -v</code>\u51fa\u73b0\u5728<code>\u5728\u6b64\u7cfb\u7edf\u4e0a\u7981\u7528\u811a\u672c</code>, \u5148<code>get-ExecutionPolicy</code>\u67e5\u770b\u662f\u5426\u4e3arestricted, \u518d\u4ee5\u7ba1\u7406\u5458\u8eab\u4efd<code>set-ExecutionPolicy RemoteSigned</code>\u5e76\u6572y\u6216a,\u89e3\u51b3\u8be5\u95ee\u9898</li> </ol>"},{"location":"typescrpt/#3-typescript","title":"3. \u521b\u5efa\u4e00\u4e2atypescript\u5e94\u7528","text":"<p>\u8fd0\u884cts\u6587\u4ef6\u65b9\u5f0f\u4e00:</p> <ol> <li>\u521b\u5efa\u4e00\u4e2a.ts\u7684\u6587\u4ef6</li> <li>\u8fdb\u5165\u6240\u5728\u6587\u4ef6\u5939\uff0c\u4f7f\u7528 <code>tsc \u6587\u4ef6\u540d.ts</code>\u7f16\u8bd1\u5c31\u4f1a\u751f\u6210.js\u6587\u4ef6</li> <li>\u518d\u7528node\u8fd0\u884c\u90a3\u4e2ajs\u6587\u4ef6\u5373\u53ef</li> </ol> <p>\u8fd0\u884cts\u6587\u4ef6\u65b9\u5f0f\u4e8c:</p> <ol> <li>\u76f4\u63a5<code>ts-node \u6587\u4ef6\u540d.ts</code>\u5373\u53ef\u4e0d\u7528\u7f16\u8bd1\u751f\u6210js\u6587\u4ef6\uff0c\u76f4\u63a5\u8fd0\u884cts\u6587\u4ef6</li> </ol>"},{"location":"typescrpt/#4","title":"4. \u8bed\u6cd5","text":""},{"location":"typescrpt/#1","title":"1. \u58f0\u660e\u53d8\u91cf\u7c7b\u578b:","text":"<p>\u53d8\u91cf\u7c7b\u578b:</p> \u7c7b\u578b \u503c \u63cf\u8ff0 number 1, 2 \u6570\u5b57 string boolean literal 1\uff0c \"a\", 1 | \"a\" \u4ee3\u7801\u91cc\u7ed9\u53d8\u91cf\u8d4b\u7684\u4efb\u4f55\u503c\uff0c\u88ab\u8d4b\u503c\u7684\u53d8\u91cf\u4e3a\u5e38\u91cf any * \u4efb\u610f\u7c7b\u578b unknown * \u7c7b\u578b\u5b89\u5168\u7684any void \u7a7a\u503c(undefined) \u6ca1\u6709\u503c(\u6216undefined) never \u6ca1\u6709\u503c \u4e0d\u80fd\u662f\u503c object {a: 'a'} \u4efb\u610f\u7684js\u5bf9\u8c61 array [1,2] \u5217\u8868 tuple [4,3] \u56fa\u5b9a\u957f\u5ea6\u7684\u5217\u8868 enum \uff08\u53c2\u6570\u540d:\u53c2\u6570\u7c7b\u578b...\uff09=&gt;\u8fd4\u56de\u503c\u7c7b\u578b \u8868\u793a\u4e00\u4e2a\u8be5\u51fd\u6570\u7b7e\u540d\u7684\u51fd\u6570\u7c7b\u578b class <p>\u8054\u5408\u7c7b\u578b:</p> <p>\u53d8\u91cf\u58f0\u660e\u65f6\u4f7f\u7528 <code>|</code> \u5206\u9694\u4e24\u4e2a\u4e0d\u540c\u7684\u7c7b\u578b: A\u548cB\uff0c\u8868\u793a\u8be5\u53d8\u91cf\u4e3aA\u7c7b\u578b\u6216B\u7c7b\u578b</p> <p>\u5982\u4f55\u58f0\u660e</p> <pre><code>/*\u53d8\u91cf\u540d: \u53d8\u91cf\u7c7b\u578b, \u793a\u4f8b\u5982\u4e0b:*/\nlet a: number\nconst a: number = 1\nfunction sum(b: number, c: number): number{...}\n</code></pre> <p>\u5982\u4f55\u58f0\u660e\u4e00\u4e2aclass:</p> <pre><code>class \u7c7b\u540d {\n    \u5c5e\u6027\u540d: \u7c7b\u578b\n    static \u5c5e\u6027\u540d: \u7c7b\u578b /*\u8868\u793a\u9759\u6001\u5c5e\u6027*/\n    constructor(\u53c2\u6570: \u7c7b\u578b){\n        this.\u5c5e\u6027\u540d = \u53c2\u6570\n    }\n\n    \u65b9\u6cd5\u540d(){...}\n}\n</code></pre> <p>\u83b7\u53d6\u4e00\u4e2a\u5bf9\u8c61\u7684\u7c7b\u578b,\u5e76\u8d4b\u7ed9\u4e00\u4e2a\u53d8\u91cf\uff1a</p> <pre><code>type myType = {name: string}\nconst obj: myType = {name: 'sb'}\n</code></pre> <p>\u5b9a\u4e49\u5e76\u4f7f\u7528\u63a5\u53e3:</p> <pre><code>interface A{\n    a: number,\n    sayhello(a: number): void\n};\n\ninterface B {\n    b: number,\n    sayhi(b: number): void\n}\n\nlet a: A = {a: 1, sayhello: ()=&gt;{console.log('hello')}} \n</code></pre> <p>\u5982\u4f55\u4f7f\u7528\u6cdb\u578b:</p> <p>1 \u6cdb\u578b\u5b9a\u4e49\uff1a\u5148\u5728\u53d8\u91cf\u540d\u53f3\u8fb9\u7528\u4e00\u4e2a\u5c16\u62ec\u53f7\u56ca\u62ec\u7528\u5230\u7684\u6cdb\u578b\u5b57\u6bcd\u4ee5\u6b64\u505a\u5230\u58f0\u660e\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u53d8\u91cf\u53f3\u8fb9\u7684\u8d4b\u503c\u8868\u8fbe\u5f0f\u6216\u7c7b\u4f53\u6216\u51fd\u6570\u4f53\u91cc\u50cf\u4f7f\u7528\u7c7b\u578b\u4e00\u6837\u76f4\u63a5\u4f7f\u7528,</p> <p>\u793a\u4f8b\u4e00(\u8d4b\u503c\u8868\u8fbe\u5f0f):</p> <pre><code>type IsExactlyAny&lt;T, S&gt; = boolean extends (T extends S ? true : false) ? true : false;\n</code></pre> <p>\u793a\u4f8b\u4e8c(\u51fd\u6570\u4f53):</p> <pre><code>function f&lt;T&gt;(a: T): T {return a}\n</code></pre> <p>\u793a\u4f8b\u4e09(\u7c7b\u4f53):</p> <pre><code>class Component&lt;P, S&gt;{ a:T}\n</code></pre> <p>\u9650\u5b9a\u6cdb\u578b\u5fc5\u987b\u5305\u542bC\u7684\u5c5e\u6027\u548c\u65b9\u6cd5:</p> <pre><code>interface C{a: number};\ntype IsExactlyAny&lt;T extends C&gt;\n</code></pre> <p>2 \u5f15\u7528\u7531\u6cdb\u578b\u5b9a\u4e49\u7684\u53d8\u91cf:</p> <pre><code>let a = IsExactlyAny&lt;son, father&gt;;\nf(10);                  /*\u4e0d\u6307\u5b9a\u6cdb\u578b\u5f15\u7528*/\nf&lt;string&gt;('hello')      /*\u6307\u5b9a\u6cdb\u578b\u5f15\u7528*/   \n</code></pre>"},{"location":"typescrpt/#2-ts","title":"2. TS\u7f16\u8bd1\u9009\u9879","text":"<ul> <li>\u76d1\u6d4b\u5230ts\u6587\u4ef6\u53d8\u5316\u540e\u81ea\u52a8\u5316\u91cd\u65b0\u7f16\u8bd1: <code>tsc \u6587\u4ef6\u540d.ts -w</code></li> <li>\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6(tsconfig.json)\u7f16\u8bd1:</li> <li>\u521b\u5efatsconfig.json(\u793a\u4f8b\u5982\u4e0b):</li> </ul> <pre><code>{\n    /**/\n    \"compilerOptions\": {\n        \"module\": \"commonjs\", \n        \"target\": \"es5\",\n        \"sourceMap\": true\n    },\n    /*\u8868\u793a\u5e0c\u671b\u54ea\u4e2a\u76ee\u5f55\u4e0b\u7684.ts\u6587\u4ef6\u4e0d\u88ab\u7f16\u8bd1*/\n    \"exclude\": [          \n        \"node_module\"\n    ],\n    /*\u8868\u793a\u5e0c\u671b\u90a3\u4e2a\u76ee\u5f55\u4e0b\u7684.ts\u6587\u4ef6\u88ab\u7f16\u8bd1*/\n    \"include\": [\"./src/**/*\"],  /*\"**\"\u8868\u793a\u4efb\u610f\u76ee\u5f55, *\u8868\u793a\u4efb\u610f\u6587\u4ef6*/\n    /*\u8868\u793a\u5e0c\u671b\u8be5\u6587\u4ef6\u4ece\u5e95\u4e0b\u7684\u54ea\u4e2a\u6587\u4ef6\u7ee7\u627f*/\n    \"extends\": \"./config/base\",\n    /*\u8868\u793a\u6307\u5b9a\u88ab\u7f16\u8bd1\u6587\u4ef6\u5217\u8868*/\n    \"files\": [\"core.ts\"],\n    /*compilerOptions\u5b50\u9009\u9879\u5982\u4e0b*/\n    \"compilerOptions\": {\n        \"target\": \"ES6\",\n        \"lib\": [\"ES6\", \"DOM\"],\n        ...\n    }\n}\n</code></pre> \u9009\u9879 \u53ef\u9009\u503c \u63cf\u8ff0 target: string \"es3\"(\u9ed8\u8ba4)\uff0c\"es5\", \"es6\" ts\u4ee3\u7801\u88ab\u7f16\u8bd1\u540e\u7684\u76ee\u6807\u7248\u672c lib: array[string] \u6307\u5b9a\u4ee3\u7801\u8fd0\u884c\u65f6\u6240\u5305\u542b\u7684\u5e93 module: string \"es5\", \"commonjs\" \u7f16\u8bd1\u540e\u4ee3\u7801\u6240\u4f7f\u7528\u7684\u6a21\u5757\u5316\u7cfb\u7edf outdir: string \u793a\u4f8b: \"./dist\" \u8f93\u51fa\u76ee\u5f55(\u9ed8\u8ba4tsconfig\u6240\u5728\u76ee\u5f55) outfile: string(\u5e38\u7528webpack\u4ee3\u66ff) \"./dist/app.js\" \u5c06\u6240\u6709\u4ee3\u7801\u5408\u5e76\u5230\u540c\u4e00\u6587\u4ef6 allowJs: boolean \u662f\u5426\u5c06js\u548cts\u4e00\u8d77\u7f16\u8bd1 removeComments: boolean \u662f\u5426\u79fb\u9664\u6ce8\u91ca noEmitOnError: boolean \u62a5\u9519\u65f6\u662f\u5426\u7ee7\u7eed\u7f16\u8bd1 <ol> <li>\u518d\u5230.json\u6240\u5728\u76ee\u5f55\u4f7f\u7528<code>tsc</code></li> </ol>"},{"location":"typescrpt/#3-webpackts","title":"3. Webpack\u7f16\u8bd1ts\u6587\u4ef6","text":""},{"location":"typescrpt/#4_1","title":"4. \u5173\u952e\u5b57","text":"static export export default import declare extends super abstract const let type interface public private declare namespace declare module <ul> <li> <p>extends:</p> </li> <li> <p>\u8868\u793a\u7ee7\u627f</p> </li> <li> <p>\u8868\u793a\u7ea6\u675f\u6cdb\u578b\uff1a\u5f53extends\u524d\u9762\u662f\u4e00\u4e2a\u6cdb\u578b\u7684\u65f6\u5019,\u8868\u793a\u8be5\u6cdb\u578b\u5fc5\u987b\u5305\u542bextends\u540e\u7684\u7c7b\u578b\u7684\u6240\u6709\u5c5e\u6027:</p> <pre><code>function getcnames&lt;T extends{cname: string}&gt;(entities: T[]): string[]{}\n</code></pre> </li> </ul>"},{"location":"typescrpt/#5","title":"5. \u8bed\u6cd5\u7cd6","text":"<ul> <li>\u53d8\u91cf\u540e?\u7684\u4f7f\u7528:</li> </ul> <pre><code>box?.addeventlistener(\"js\")  /*\u8868\u793a\u82e5box\u4e0d\u4e3anull\u6267\u884caddeventlistener,\u5426\u5219\uff0c\u4e0d\u6267\u884c*/\n</code></pre> <ul> <li>\u53d8\u91cf\u540e!\u7684\u4f7f\u7528(\u975e\u7a7a\u65ad\u8a00\u64cd\u4f5c\u7b26: \u4ece\u53d8\u91cf\u7684\u503c\u57df\u53bb\u9664null\u548cundefined)</li> </ul>"},{"location":"typescrpt/#_2","title":"\u4e8c. \u7c7b\u578b\u5927\u5168","text":"<ul> <li>number</li> <li>string</li> <li>Function</li> <li>any</li> <li>class</li> <li>List</li> </ul> <p>\u9ad8\u7ea7\u7c7b\u578b:</p> <ul> <li>class\u7c7b</li> <li>\u7c7b\u578b\u517c\u5bb9\u6027</li> <li>\u4ea4\u53c9\u7c7b\u578b</li> <li>\u6cdb\u578b\u548ckeyof</li> <li>\u7d22\u5f15\u7b7e\u540d\u7c7b\u578b\u548c\u7d22\u5f15\u67e5\u8be2\u7c7b\u578b</li> <li>\u6620\u5c04\u7c7b\u578b</li> </ul>"},{"location":"typescrpt/#_3","title":"\u4e09. \u7c7b\u578b\u64cd\u4f5c: \u4ea4\u53c9\u4e0e\u8054\u5408","text":"<ul> <li>\u8054\u5408: \u7528\u4e8e\u8868\u793a\u4e00\u4e2a\u7c7b\u578b\u662f\u591a\u4e2a\u7c7b\u578b\u7684\u5176\u4e2d\u67d0\u4e00\u4e2a, \u591a\u4e2a\u7c7b\u578b\u95f4\u7528<code>|</code>\u8fde\u63a5:</li> </ul> <pre><code>interface Person {name:string, id: number};\ninterface Contact {phone: string, id: number}\ntype A = Person | Contact\n</code></pre> <ul> <li>\u4ea4\u53c9: \u7528\u4e8e\u7ec4\u5408\u591a\u4e2a\u7c7b\u578b\u4e3a\u4e00\u4e2a\u7c7b\u578b, \u591a\u4e2a\u7c7b\u578b\u95f4\u7528<code>&amp;</code>\u8fde\u63a5(\u5f53<code>&amp;</code>\u524d\u540e\u4e24\u4e2a\u7c7b\u578b\u51fa\u73b0\u540c\u540d\u5c5e\u6027\u4f46\u5c5e\u6027\u7c7b\u578b\u51b2\u7a81\u65f6, <code>&amp;</code>\u4ea7\u751f\u7684\u65b0\u7c7b\u578b\u7684\u90a3\u4e2a\u540c\u540d\u5c5e\u6027\u4f1a\u662f<code>&amp;</code>\u524d\u540e\u4e24\u4e2a\u7c7b\u578b\u8054\u5408\u7c7b\u578b):</li> </ul> <pre><code>interface Person {name:string};\ninterface Contact {phone: string}\ntype B = Person &amp; Contact\nlet obj: B = {\n    name: \"hi\",\n    phone: \"123456\"\n}\n</code></pre>"},{"location":"typescrpt/#classinterfacetype","title":"\u4e09. \u5b9a\u4e49Class\u548cinterface\u548ctype","text":"<p>interface\u793a\u4f8b:</p> <pre><code>interface A {\n    name: string\n}\n\nconst a: A = {name: \"a\"};\n</code></pre> <p>interface\u548ctype\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4e00\u6837, \u53ef\u6df7\u7528:</p> <pre><code>type Foo = {\n    bar: string\n}\n\ninterface Foo = {\n    bar: string\n}\n</code></pre> <p>interface\u4e0etype\u5173\u952e\u5b57\u7684\u5dee\u522b:</p> <ul> <li>interface\u53ef\u4f7f\u7528extends\u8868\u793a\u7ee7\u627f,\u51fa\u73b0\u5b50\u7c7b\u4e0e\u7236\u7c7b\u6709\u540c\u540d\u5c5e\u6027\u4f46\u5c5e\u6027\u7c7b\u578b\u51b2\u7a81\u65f6\u4f1a\u62a5\u9519</li> <li>type\u58f0\u660e\u7684\u7c7b\u578b\u53ef\u4ee5\u7528<code>&amp;</code>, <code>|</code>\u7c7b\u578b\u7b26\u53f7, \u4ea4\u53c9\u4e24\u4e2a\u7c7b\u578b\u65f6, \u5f53<code>&amp;</code>\u524d\u540e\u4e24\u4e2a\u7c7b\u578b\u51fa\u73b0\u540c\u540d\u5c5e\u6027\u4f46\u5c5e\u6027\u7c7b\u578b\u51b2\u7a81\u65f6, <code>&amp;</code>\u4ea7\u751f\u7684\u65b0\u7c7b\u578b\u7684\u90a3\u4e2a\u540c\u540d\u5c5e\u6027\u4f1a\u662f<code>&amp;</code>\u524d\u540e\u4e24\u4e2a\u7c7b\u578b\u8054\u5408\u7c7b\u578b</li> <li>interface\u53ea\u80fd\u4e3a\u5bf9\u8c61\u6307\u5b9a\u7c7b\u578b, \u800ctype\u53ef\u4ee5\u4e3a\u4efb\u610f\u7c7b\u578b\u6307\u5b9a\u522b\u540d</li> </ul>"},{"location":"typescrpt/#_4","title":"\u56db. \u5404\u79cd\u58f0\u660e\u7c7b\u578b","text":"<p>\u65b9\u5f0f\u4e00(\u793a\u4f8b):</p> <pre><code>class A {\n    name: string\n}\nconst a: A = {name: \"a\"}\n</code></pre> <p>\u65b9\u5f0f\u4e8c(\u63a8\u8350):</p> <pre><code>// \u58f0\u660e\u4e00\u4e2a\u5bf9\u8c61\nconst a: {name: string} = {name: \"a\"}\n\n// \u58f0\u660e\u4e00\u4e2a\u51fd\u6570:\nconst b: ()=&gt;string = () =&gt; {return \"hello\"}\n\n// \u58f0\u660e\u4e00\u4e2a\u6df7\u5408\u7c7b\u578b\u6570\u7ec4:\nconst c: (number | string)[] = [1, \"string\", 2]\nconst d: {name: string}[] = [{name: \"d\"}]\ntype E = {name: string};\nconst e: E[] = [{name: \"e\"}]\n\n//\u58f0\u660e\u5143\u7ec4: \u5143\u7ec4\u91cc\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u53ea\u80fd\u662f\u67d0\u4e2a\u7279\u5b9a\u7c7b\u578b\nconst f:[string, string, number] = [\"hello1\", \"hello2\", 2]\n</code></pre>"},{"location":"typescrpt/#_5","title":"\u4e94. \u5173\u952e\u5b57\u5927\u5168","text":"<ul> <li>type, \u4f7f\u7528\u793a\u4f8b:</li> </ul> <pre><code>type E = {name: string}\nconst e:E[] = [{name: \"a\"}]\n</code></pre>"},{"location":"typescrpt/#_6","title":"\u516d. \u6cdb\u578b\u521d\u6b65\u58f0\u660e","text":"<p>\u58f0\u660e\u4e00\u4e2a\u6cdb\u578b:</p> <ol> <li>\u5728interface\u540d\u6216class\u540d\u6216\u51fd\u6570\u540d\u65c1\u4f7f\u7528\u5c16\u62ec\u53f7,\u5c16\u62ec\u53f7\u91cc\u4f7f\u7528\u4efb\u610f\u7684variableName\u4f5c\u4e3a\u6cdb\u578b\u540d\u5373\u53ef\u58f0\u660e\u6cdb\u578b</li> <li>\u5728\u4f7f\u7528\u51fd\u6570\u6216\u521b\u5efa\u5b9e\u4f8b\u65f6\u901a\u8fc7\u5c16\u62ec\u53f7\u7ed9\u6cdb\u578b\u4f20\u5165\u771f\u5b9e\u7c7b\u578b,</li> </ol> <p>\u4e0a\u8ff0\u6b65\u9aa4\u7684demo:</p> <p>\u7ed9\u51fd\u6570\u58f0\u660e\u6cdb\u578b\u4e00:</p> <pre><code>// step 1:\nfunction join&lt;T&gt;(first: T, second: T){\n    return `${first} ${second}`;\n}\n// step 2\njoin&lt;string&gt;(\"a\", \"b\")\n</code></pre> <p>\u7ed9\u51fd\u6570\u58f0\u660e\u6cdb\u578b\u4e8c:</p> <pre><code>const getParam = &lt;T, U&gt;(param1: T: param2: U): [T, U][]\n</code></pre> <p>\u7ed9\u63a5\u53e3\u58f0\u660e\u6cdb\u578b:(\u6ce8\u610f: \u9700\u8981\u663e\u5f0f\u4e3a\u6cdb\u578b\u6307\u5b9a\u7c7b\u578b)</p> <pre><code>interface IdFunc&lt;T&gt;{\n    id: (value: T) =&gt; T,\n    ids: () =&gt; T[]\n}\n\n// \u663e\u5f0f\u4e3a\u6cdb\u578b\u6307\u5b9anumber\u7c7b\u578b\nlet obj: IdFunc&lt;number&gt; = {\n    id: (value: number) =&gt; value\n    ids: () =&gt; []\n}\n</code></pre> <p>\u7ed9\u6570\u7ec4\u58f0\u660e\u6cdb\u578b\uff1a(\u6ce8\u610f: \u6570\u7ec4\u5176\u5b9e\u5c31\u662f\u6cdb\u578b\u63a5\u53e3\uff0c\u53ca\u7b49\u540c\u4e8e\u4e3a\u63a5\u53e3\u58f0\u660e\u6cdb\u578b)</p> <p>\u7ed9class\u58f0\u660e\u6cdb\u578b: (\u6ce8\u610f: \u5f62\u4f3c\u7ed9\u63a5\u53e3\u58f0\u660e\u6cdb\u578b, \u4e0d\u540c\u7684\u662f\u663e\u5f0f\u4e3a\u6cdb\u578b\u6307\u5b9a\u7c7b\u578b\u5728\u8fd9\u91cc\u4e0d\u662f\u5fc5\u987b\u7684)</p> <pre><code>class A&lt;T&gt;{\n    id: T\n    constructor(value: T){\n        this.id = value;\n    }\n}\n\nconst a = new A&lt;number&gt;(100); //\u8fd9\u91cc&lt;number&gt;\u53ef\u4ee5\u7701\u7565\uff0c\u56e0\u4e3a\u6709constructor\u5e26\u5165T\u7c7b\u578b\n</code></pre>"},{"location":"typescrpt/#_7","title":"\u4e03. \u6cdb\u578b\u7ea6\u675f","text":"<p>\u5f53\u6211\u4eec\u5728\u4e0a\u4e2asection\u6b65\u9aa4\u4e00\u4e2d\u58f0\u660e\u4e00\u4e2a\u6cdb\u578b\u65f6, \u6211\u4eec\u5728\u5c16\u62ec\u53f7\u91cc\u9664\u4e86\u5355\u7eaf\u7684\u4f20\u5165\u4e00\u4e2a\u6cdb\u578b\u53d8\u91cf,\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u5173\u952e\u5b57\u5bf9\u6cdb\u578b\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c,\u8fd9\u4e9b\u7edf\u79f0\u4e3a\u6cdb\u578b\u7ea6\u675f:</p> <ul> <li><code>T extends type</code>(\u7528\u4e8e\u8868\u660e\u8be5\u6cdb\u578b\u5fc5\u987b\u62e5\u6709extends\u540eclass\u6216interface\u6216\u6cdb\u578b\u7684\u6240\u6709\u5c5e\u6027\u548c\u65b9\u6cd5):</li> </ul> <pre><code>interface A {\n    name: string\n}\n\nclass AClass&lt;T extends A&gt;{\n    constructor(private params: T[]){}\n}\n</code></pre> <ul> <li><code>[k: string]</code>\u7d22\u5f15\u7b7e\u540d\u7c7b\u578b(\u7528\u4e8e\u8868\u793a\u53ea\u8981\u662fstring\u7684\u5c5e\u6027\u540d\u79f0\u90fd\u53ef\u4ee5\u51fa\u73b0\u5728\u8be5\u5bf9\u8c61\u91cc):</li> </ul> <pre><code>interface A {\n    [k: number] : string\n    //\u8868\u793aA\u7c7b\u578b\u7684key\u662f\u4e00\u4e2anumber\u7c7b\u578b\uff0c\u503c\u4e3astring\u7c7b\u578b\uff0c\u4e14k\u53ef\u4ee5\u88ab\u52a8\u6001\u751f\u6210\n    [n: string]: string\n    [o: Symbol]: number\n    // js\u5bf9\u8c61\u7684\u952e\u540d\u5c5e\u6027\u53ea\u80fd\u662f\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u6216Symbol\u5bf9\u8c61\u7684\u5176\u4e2d\u4e00\u79cd\n}\n</code></pre> <ul> <li><code>readonly</code>\u53ea\u8bfb\u5c5e\u6027:</li> </ul> <pre><code>interface A {\n    readonly name: string\n}\n</code></pre> <ul> <li><code>K extends keyof T</code>: \u83b7\u53d6\u6240\u6709T\u7684\u5c5e\u6027\u540d\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5b83\u4eec\u7ed3\u6784\u51fa\u6765\u4f5c\u4e3a\u8054\u5408\u7c7b\u578b\u8fd4\u56de</li> </ul> <pre><code>interface IPerson {\n    name: string,\n    age: number,\n    sex: 0 | 1\n}\n\ntype P1 = keyof IPerson;\n\ninterface ITest {\n    key: P1 // key\u7684\u503c\u53ea\u80fd\u662f\"name\", \"age\", \"sex\"\u4e09\u8005\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u4e32\n}\n\nlet test: ITest = {\n    key: \"name\"  // \u53ef\u4ee5\u8fd8\u53ef\u4ee5\u88ab\u8d4b\u503c\u4e3a\"age\"\u6216\"sex\"\n}\n\nconst getProps = &lt;T, K extends keyof T&gt;(object: T, propName: K) =&gt; {\n    return object[propName] \n    // K\u7c7b\u578b\u53ea\u80fd\u662fT\u7684\u952e\u540d\u79f0\u5b57\u7b26\u4e32, \u5373propName\u7684\u503c\u53ea\u80fd\u662fobject\u7684\u952e\u540d\u79f0\u7684\u5b57\u7b26\u4e32,\n    //\u56e0\u800c\u5f53T\u4e3aIPerson\u7c7b\u578b\u65f6, K extends keyof T\u88ab\u8f6c\u6362\u4e3a\u4e86\"name\" | \"age\" | \"sex\",\n    // \u6240\u4ee5,\u51fd\u6570\u91cc\u7684propName: K\u5373\u4e3apropName: \"name\" | \"age\" | \"sex\"\n}\n\ngetProps(test, \"name\")\n</code></pre> <ul> <li><code>[k in PropKeys]</code>\u6620\u5c04\u7c7b\u578b:</li> </ul> <p>(\u5176\u4e2din\u540e\u9762\u8ddf\u7684PropKeys\u8868\u793a\u4e00\u4e2a\u8054\u5408\u7c7b\u578b, \u7528\u4e8e\u8868\u793a\u952e\u540d\u79f0\u4ecePropKey\u4e2d\u7b5b\u9009):</p> <pre><code>type PropKeys = \"a\" | \"b\" | \"c\";\ntype T = {[k in PropKeys]: number}\n</code></pre> <ul> <li><code>[k in keyof T]</code>\u6620\u5c04\u7c7b\u578b:</li> </ul> <pre><code>type Props = {a: number, b: string, c: string};\ntype P = {[k in keyof Props]: number}\n</code></pre> <ul> <li><code>T[P]</code>\u7d22\u5f15\u67e5\u8be2(\u8bbf\u95ee)\u7c7b\u578b: </li> </ul> <p>\u5f53<code>T[P]</code>\u4e0etype\u5173\u952e\u5b57\u7ed3\u5408\u65f6, \u5219\u8868\u793a\u83b7\u53d6T\u7c7b\u578b\u4e2d\u952e\u4e3aP\u7684\u5c5e\u6027\u503c\u7c7b\u578b,\u51fa\u73b0\u7684\u573a\u666f\u53ef\u4ee5\u5728<code>Partial&lt;T&gt;</code>\u7684\u5b9e\u73b0\u4e2d\u770b\u5230</p> <pre><code>// Partial\u7684\u5b9e\u73b0:\ntype Partial&lt;T&gt; = {\n    [P in keyof T]?: T[P]\n    //\u8fd9\u91ccT[P]\u8868\u793a\u7684\u662f\u83b7\u53d6T[P]\u5c5e\u6027\u6240\u5bf9\u5e94\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u662fT[P]\u7684\u5bf9\u8c61\u5c5e\u6027\u503c\n}\n\n//\u57fa\u672c\u4f7f\u7528:\ntype Props = {a: number, b: string, c: boolean}\ntype TypeA = Props[\"a\"]\n//\u6ce8\u610f: \u5fc5\u987b\u8981\u6709type\u5173\u952e\u5b57, Props[\"a\"]\u624d\u8868\u793a\u8bbf\u95eea\u5c5e\u6027\u7684\u7c7b\u578b\uff0c\u5426\u5219\u4f1a\u88ab\u89e3\u91ca\u4e3ajs\u4e2d\u8bbf\u95eea\u5c5e\u6027\u7684\u503c\n</code></pre> <ul> <li><code>T[A | B]</code>\u7d22\u5f15\u67e5\u8be2\u591a\u4e2a\u7c7b\u578b:</li> </ul> <p>\u5f53\u65b9\u62ec\u53f7\u91cc\u662f\u4e00\u4e2a\u8054\u5408\u7c7b\u578b\u65f6,\u8868\u793a\u5c5e\u6027\u540d\u4e3aA\u7684\u7c7b\u578b\u8054\u5408\u5c5e\u6027\u4e3aB\u7684\u7c7b\u578b,\u793a\u4f8b:</p> <pre><code>type Props = {a: number, b: string, c: boolean};\ntype typeA = Props[\"a\" | \"b\" | \"c\"]\n// \u7b49\u540c\u4e8e typeA = number | string | boolean\ntype typeA = Props[keyof Props]\n</code></pre> <p>https://wenku.baidu.com/view/29b29d1664ec102de2bd960590c69ec3d4bbdb43.html</p> <p>https://blog.csdn.net/web15117716165/article/details/123080349</p>"},{"location":"typescrpt/#_8","title":"\u516b. \u6cdb\u578b\u5de5\u5177\u7c7b","text":"<p>\u6cdb\u578b\u5de5\u5177\u7c7b\u578b\u662f\u57fa\u4e8e\u6cdb\u578b\u5b9e\u73b0\u7684\u7c7b\uff0c\u7528\u4e8e\u64cd\u4f5c\u6cdb\u578b\u7684\u5173\u7cfb,\u4e14\u662fts\u5185\u7f6e\u7684</p>"},{"location":"typescrpt/#1-partial","title":"1. Partial","text":"<p><code>Partial&lt;T&gt;</code>\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b\u578b,\u8fd9\u4e2a\u65b0\u7c7b\u578b\u5c06\u539f\u6709\u7684T\u7c7b\u578b\u8bbe\u7f6e\u4e3a\u53ef\u9009, \u793a\u4f8b:</p> <pre><code>interface Props {\n    id: string\n    children: number[]\n}\n\ntype partialProps = Partial&lt;Props&gt;\n</code></pre>"},{"location":"typescrpt/#2-readonly","title":"2. Readonly","text":"<p><code>Readonly&lt;T&gt;</code>\u7528\u4e8e\u5c06\u539f\u6709T\u7c7b\u578b\u7684\u6240\u6709\u5c5e\u6027\u8bbe\u7f6e\u4e3a\u53ea\u53ef\u8bfb:</p> <pre><code>interface Props {\n    id: string\n    children: number[]\n}\n\ntype partialProps = Readonly&lt;Props&gt;\n</code></pre>"},{"location":"typescrpt/#3-pick","title":"3. Pick","text":"<p><code>Pick&lt;T, K&gt;</code>\u8868\u793a\u4eceT\u7c7b\u578b\u4e2d\u9009\u62e9\u4e00\u7ec4\u7531K\u6307\u5b9a\u7684\u5c5e\u6027\u6765\u6784\u9020\u65b0\u7c7b\u578b,\u793a\u4f8b:</p> <pre><code>interface Props {\n    id: string\n    title: string\n    children: number[]\n}\ntype PickProps = Pick&lt;Props, \"id\" | \"title\"&gt;\n</code></pre>"},{"location":"typescrpt/#4-record","title":"4. Record","text":"<p><code>Record&lt;K, T&gt;</code>\u6784\u9020\u4e00\u4e2a\u5bf9\u8c61\u7c7b\u578b, K\u4e3a\u5c5e\u6027\u952e, T\u4e3a\u5c5e\u6027\u503c\u4e14\u7c7b\u578b\u4e3atype, \u793a\u4f8b:</p> <pre><code>type RecordObj = Record&lt;'a' | 'b' | 'c', string[]&gt;\n// \u4e0a\u9762\u521b\u5efa\u4e86RecordObj\u7c7b\u578b\uff0c\u8be5\u7c7b\u578b\u7531a, b, c\u4e09\u4e2a\u5c5e\u6027\uff0c\u4e14\u8fd9\u4e09\u4e2a\u5c5e\u6027\u7684\u7c7b\u578b\u4e3astring[]\nlet obj: RecordObj = {\n    a: ['1'],\n    b: ['2'],\n    c: ['3']\n}\n</code></pre> <p>https://blog.csdn.net/weixin_44828005/article/details/119720185</p>"},{"location":"typescrpt/#namespace","title":"\u516b. Namespace","text":"<p>\u5c06\u4e00\u4e9bclass\u6216variable\u6216\u51fd\u6570\u6a21\u5757\u5316\uff0c\u53ef\u4ee5\u5c06\u5b83\u4eec\u653e\u5728\u4e00\u4e2anamespace\u91cc\uff0c\u8981\u521b\u5efa\u4e00\u4e2anamespace,\u53ef\u4ee5\u7528namespace\u5173\u952e\u5b57\u521b\u5efa, \u793a\u4f8b:</p> <pre><code>namespace alpha{\n    export class A{\n        constructor(){}\n    }\n}\nalpha.A();\n</code></pre> <p>\u5bf9\u4e8enamespace\u7684\u64cd\u4f5c: namespace\u8fd8\u53ef\u4ee5\u5d4c\u5957,\u793a\u4f8b:</p> <pre><code>namespace alpha{\n    export namespace alpha1{\n       export class A{\n        constructor(){}\n        } \n    }\n}\nalpha.alpha1.A()\n</code></pre>"}]}